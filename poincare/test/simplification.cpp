#include <quiz.h>
#include <poincare/expression.h>
#include <poincare/rational.h>
#include <poincare/addition.h>
#include <apps/shared/global_context.h>
#include <ion.h>
#include <assert.h>
#include "helper.h"
#include "./tree/helpers.h"

using namespace Poincare;

QUIZ_CASE(poincare_simplification_decimal) {
  assert_parsed_expression_simplify_to("-2.3", "-23/10");
  assert_parsed_expression_simplify_to("-232.2·¥á-4", "-1161/50000");
  assert_parsed_expression_simplify_to("0000.000000·¥á-2", "0");
  assert_parsed_expression_simplify_to(".000000", "0");
  assert_parsed_expression_simplify_to("0000", "0");
}

QUIZ_CASE(poincare_simplification_rational) {
  // 1/MaxIntegerString()
  char buffer[400] = "1/";
  strlcpy(buffer+2, MaxIntegerString(), 400-2);
  assert_parsed_expression_simplify_to(buffer, buffer);
  // 1/OverflowedIntegerString()
  strlcpy(buffer+2, BigOverflowedIntegerString(), 400-2);
  assert_parsed_expression_simplify_to(buffer, "0");
  // MaxIntegerString()
  assert_parsed_expression_simplify_to(MaxIntegerString(), MaxIntegerString());
  // OverflowedIntegerString()
  assert_parsed_expression_simplify_to(BigOverflowedIntegerString(), Infinity::Name());
  assert_parsed_expression_simplify_to(BigOverflowedIntegerString(), Infinity::Name());
  // -OverflowedIntegerString()
  buffer[0] = '-';
  strlcpy(buffer+1, BigOverflowedIntegerString(), 400-1);
  assert_parsed_expression_simplify_to(buffer, "-inf");

  assert_parsed_expression_simplify_to("-1/3", "-1/3");
  assert_parsed_expression_simplify_to("22355/45325", "4471/9065");
  assert_parsed_expression_simplify_to("0000.000000", "0");
  assert_parsed_expression_simplify_to(".000000", "0");
  assert_parsed_expression_simplify_to("0000", "0");
  assert_parsed_expression_simplify_to("0.1234567", "1234567/10000000");
  assert_parsed_expression_simplify_to("123.4567", "1234567/10000");
  assert_parsed_expression_simplify_to("0.1234", "617/5000");
  assert_parsed_expression_simplify_to("0.1234000", "617/5000");
  assert_parsed_expression_simplify_to("001234000", "1234000");
  assert_parsed_expression_simplify_to("001.234000·¥á3", "1234");
  assert_parsed_expression_simplify_to("001234000·¥á-4", "617/5");
  assert_parsed_expression_simplify_to("3/4+5/4-12+1/567", "-5669/567");
  assert_parsed_expression_simplify_to("34/78+67^(-1)", "1178/2613");
  assert_parsed_expression_simplify_to("12348/34564", "3087/8641");
  assert_parsed_expression_simplify_to("1-0.3-0.7", "0");
  assert_parsed_expression_simplify_to("123456789123456789+112233445566778899", "235690234690235688");
  assert_parsed_expression_simplify_to("56^56", "79164324866862966607842406018063254671922245312646690223362402918484170424104310169552592050323456");
  assert_parsed_expression_simplify_to("999^999", "999^999");
  assert_parsed_expression_simplify_to("999^-999", "1/999^999");
  assert_parsed_expression_simplify_to("0^0", Undefined::Name());
  assert_parsed_expression_simplify_to("x^0", "1");
  assert_parsed_expression_simplify_to("œÄ^0", "1");
  assert_parsed_expression_simplify_to("A^0", "1");
  assert_parsed_expression_simplify_to("(-3)^0", "1");
}

QUIZ_CASE(poincare_simplification_infinity) {
  // 0 and infinity
  assert_parsed_expression_simplify_to("0/0", Undefined::Name());
  assert_parsed_expression_simplify_to("0/inf", "0");
  assert_parsed_expression_simplify_to("inf/0", Undefined::Name());
  assert_parsed_expression_simplify_to("0√óinf", Undefined::Name());
  assert_parsed_expression_simplify_to("3√óinf/inf", "undef");
  assert_parsed_expression_simplify_to("1·¥á1000", "inf");
  assert_parsed_expression_simplify_to("-1·¥á1000", "-inf");
  assert_parsed_expression_simplify_to("-1·¥á-1000", "0");
  assert_parsed_expression_simplify_to("1·¥á-1000", "0");
  //assert_parsed_expression_simplify_to("1√ó10^1000", "inf");

  assert_parsed_expression_simplify_to("inf^0", "undef");
  assert_parsed_expression_simplify_to("1^inf", "1^inf");
  assert_parsed_expression_simplify_to("1^(X^inf)", "1^\u0012X^inf\u0013");
  assert_parsed_expression_simplify_to("inf^(-1)", "0");
  assert_parsed_expression_simplify_to("(-inf)^(-1)", "0");
  assert_parsed_expression_simplify_to("inf^(-‚àö(2))", "0");
  assert_parsed_expression_simplify_to("(-inf)^(-‚àö(2))", "0");
  assert_parsed_expression_simplify_to("inf^2", "inf");
  assert_parsed_expression_simplify_to("(-inf)^2", "inf");
  assert_parsed_expression_simplify_to("inf^‚àö(2)", "inf");
  assert_parsed_expression_simplify_to("(-inf)^‚àö(2)", "inf√ó(-1)^‚àö(2)");
  assert_parsed_expression_simplify_to("inf^x", "inf^x");
  assert_parsed_expression_simplify_to("1/inf+24", "24");
  assert_parsed_expression_simplify_to("‚ÑØ^(inf)/inf", "0√ó‚ÑØ^inf");

  // Logarithm
  assert_parsed_expression_simplify_to("log(inf,0)", "undef");
  assert_parsed_expression_simplify_to("log(inf,1)", "undef");
  assert_parsed_expression_simplify_to("log(0,inf)", "undef");
  assert_parsed_expression_simplify_to("log(1,inf)", "0");
  assert_parsed_expression_simplify_to("log(inf,inf)", "undef");

  assert_parsed_expression_simplify_to("ln(inf)", "inf");
  assert_parsed_expression_simplify_to("log(inf,-3)", "log(inf,-3)");
  assert_parsed_expression_simplify_to("log(inf,3)", "inf");
  assert_parsed_expression_simplify_to("log(inf,0.3)", "-inf");
  assert_parsed_expression_simplify_to("log(inf,x)", "log(inf,x)");
  assert_parsed_expression_simplify_to("ln(inf)*0", "undef");
}

QUIZ_CASE(poincare_simplification_addition) {
  assert_parsed_expression_simplify_to("1+x", "x+1");
  assert_parsed_expression_simplify_to("1/2+1/3+1/4+1/5+1/6+1/7", "223/140");
  assert_parsed_expression_simplify_to("1+x+4-i-2x", "-i-x+5");
  assert_parsed_expression_simplify_to("2+1", "3");
  assert_parsed_expression_simplify_to("1+2", "3");
  assert_parsed_expression_simplify_to("1+2+3+4+5+6+7", "28");
  assert_parsed_expression_simplify_to("(0+0)", "0");
  assert_parsed_expression_simplify_to("2+A", "A+2");
  assert_parsed_expression_simplify_to("1+2+3+4+5+A+6+7", "A+28");
  assert_parsed_expression_simplify_to("1+A+2+B+3", "A+B+6");
  assert_parsed_expression_simplify_to("-2+6", "4");
  assert_parsed_expression_simplify_to("-2-6", "-8");
  assert_parsed_expression_simplify_to("-A", "-A");
  assert_parsed_expression_simplify_to("A-A", "0");
  assert_parsed_expression_simplify_to("-5œÄ+3œÄ", "-2√óœÄ");
  assert_parsed_expression_simplify_to("1-3+A-5+2A-4A", "-A-7");
  assert_parsed_expression_simplify_to("A+B-A-B", "0");
  assert_parsed_expression_simplify_to("A+B+(-1)√óA+(-1)√óB", "0");
  assert_parsed_expression_simplify_to("2+13cos(2)-23cos(2)", "-10√ócos(2)+2");
  assert_parsed_expression_simplify_to("1+1+ln(2)+(5+3√ó2)/9-4/7+1/98", "\u0012882√óln(2)+2347\u0013/882");
  assert_parsed_expression_simplify_to("1+2+0+cos(2)", "cos(2)+3");
  assert_parsed_expression_simplify_to("A-A+2cos(2)+B-B-cos(2)", "cos(2)");
  assert_parsed_expression_simplify_to("x+3+œÄ+2√óx", "3√óx+œÄ+3");
  assert_parsed_expression_simplify_to("1/(x+1)+1/(œÄ+2)", "\u0012x+œÄ+3\u0013/\u0012œÄ√óx+2√óx+œÄ+2\u0013");
  assert_parsed_expression_simplify_to("1/x^2+1/(x^2√óœÄ)", "\u0012œÄ+1\u0013/\u0012œÄ√óx^2\u0013");
  assert_parsed_expression_simplify_to("1/x^2+1/(x^3√óœÄ)", "\u0012œÄ√óx+1\u0013/\u0012œÄ√óx^3\u0013");
  assert_parsed_expression_simplify_to("4x/x^2+3œÄ/(x^3√óœÄ)", "\u00124√óx^2+3\u0013/x^3");
  assert_parsed_expression_simplify_to("3^(1/2)+2^(-2√ó3^(1/2)√ó‚ÑØ^œÄ)/2", "\u00122√ó2^\u00122√ó‚àö(3)√ó‚ÑØ^œÄ\u0013√ó‚àö(3)+1\u0013/\u00122√ó2^\u00122√ó‚àö(3)√ó‚ÑØ^œÄ\u0013\u0013");
  assert_parsed_expression_simplify_to("[[1,2+ùê¢][3,4][5,6]]+[[1,2+ùê¢][3,4][5,6]]", "[[2,4+2√óùê¢][6,8][10,12]]");
  assert_parsed_expression_simplify_to("3+[[1,2][3,4]]", "undef");
  assert_parsed_expression_simplify_to("[[1][3][5]]+[[1,2+ùê¢][3,4][5,6]]", "undef");
  assert_parsed_expression_simplify_to("[[1,3]]+confidence(œÄ/4, 6)+[[2,3]]", "[[3,6]]+confidence(œÄ/4,6)");
}

QUIZ_CASE(poincare_simplification_multiplication) {
  assert_parsed_expression_simplify_to("undef√óx", "undef");
  assert_parsed_expression_simplify_to("0√óx+B", "B");
  assert_parsed_expression_simplify_to("0√óx√ó0√ó32√ócos(3)", "0");
  assert_parsed_expression_simplify_to("3√óA^4√óB^x√óB^2√ó(A^2+2)√ó2√ó1.2", "\u001236√óA^6√óB^\u0012x+2\u0013+72√óA^4√óB^\u0012x+2\u0013\u0013/5");
  assert_parsed_expression_simplify_to("A√ó(B+C)√ó(D+3)", "3√óA√óB+3√óA√óC+A√óB√óD+A√óC√óD");
  assert_parsed_expression_simplify_to("A/B", "A/B");
  assert_parsed_expression_simplify_to("(A√óB)^2", "A^2√óB^2");
  assert_parsed_expression_simplify_to("(1/2)√óA/B", "A/\u00122√óB\u0013");
  assert_parsed_expression_simplify_to("1+2+3+4+5+6", "21");
  assert_parsed_expression_simplify_to("1-2+3-4+5-6", "-3");
  assert_parsed_expression_simplify_to("987654321123456789√ó998877665544332211", "986545842648570754445552922919330479");
  assert_parsed_expression_simplify_to("2/3", "2/3");
  assert_parsed_expression_simplify_to("9/17+5/4", "121/68");
  assert_parsed_expression_simplify_to("1/2√ó3/4", "3/8");
  assert_parsed_expression_simplify_to("0√ó2/3", "0");
  assert_parsed_expression_simplify_to("1+(1/(1+1/(1+1/(1+1))))", "8/5");
  assert_parsed_expression_simplify_to("1+2/(3+4/(5+6/(7+8)))", "155/101");
  assert_parsed_expression_simplify_to("3/4√ó16/12", "1");
  assert_parsed_expression_simplify_to("3/4√ó(8+8)/12", "1");
  assert_parsed_expression_simplify_to("916791/794976477", "305597/264992159");
  assert_parsed_expression_simplify_to("321654987123456789/112233445566778899", "3249040273974311/1133671167341201");
  assert_parsed_expression_simplify_to("0.1+0.2", "3/10");
  assert_parsed_expression_simplify_to("2^3", "8");
  assert_parsed_expression_simplify_to("(-1)√ó(-1)", "1");
  assert_parsed_expression_simplify_to("(-2)^2", "4");
  assert_parsed_expression_simplify_to("(-3)^3", "-27");
  assert_parsed_expression_simplify_to("(1/2)^-1", "2");
  assert_parsed_expression_simplify_to("‚àö(2)√ó‚àö(3)", "‚àö(6)");
  assert_parsed_expression_simplify_to("2√ó2^œÄ", "2√ó2^œÄ");
  assert_parsed_expression_simplify_to("A^3√óB√óA^(-3)", "B");
  assert_parsed_expression_simplify_to("A^3√óA^(-3)", "1");
  assert_parsed_expression_simplify_to("2^œÄ√ó(1/2)^œÄ", "1");
  assert_parsed_expression_simplify_to("A^3√óA^(-3)", "1");
  assert_parsed_expression_simplify_to("(x+1)√ó(x+2)", "x^2+3√óx+2");
  assert_parsed_expression_simplify_to("(x+1)√ó(x-1)", "x^2-1");
  assert_parsed_expression_simplify_to("11œÄ/(22œÄ+11œÄ)", "1/3");
  assert_parsed_expression_simplify_to("11/(22œÄ+11œÄ)", "1/\u00123√óœÄ\u0013");
  assert_parsed_expression_simplify_to("-11/(22œÄ+11œÄ)", "-1/\u00123√óœÄ\u0013");
  assert_parsed_expression_simplify_to("A^2√óB√óA^(-2)√óB^(-2)", "1/B");
  assert_parsed_expression_simplify_to("A^(-1)√óB^(-1)", "1/\u0012A√óB\u0013");
  assert_parsed_expression_simplify_to("x+x", "2√óx");
  assert_parsed_expression_simplify_to("2√óx+x", "3√óx");
  assert_parsed_expression_simplify_to("x√ó2+x", "3√óx");
  assert_parsed_expression_simplify_to("2√óx+2√óx", "4√óx");
  assert_parsed_expression_simplify_to("x√ó2+2√ón", "2√ón+2√óx");
  assert_parsed_expression_simplify_to("x+x+n+n", "2√ón+2√óx");
  assert_parsed_expression_simplify_to("x-x-n+n", "0");
  assert_parsed_expression_simplify_to("x+n-x-n", "0");
  assert_parsed_expression_simplify_to("x-x", "0");
  assert_parsed_expression_simplify_to("œÄ√ó3^(1/2)√ó(5œÄ)^(1/2)√ó(4/5)^(1/2)", "2√ó‚àö(3)√óœÄ^\u00123/2\u0013");
  assert_parsed_expression_simplify_to("12^(1/4)√ó(œÄ/6)√ó(12√óœÄ)^(1/4)", "\u0012‚àö(3)√óœÄ^\u00125/4\u0013\u0013/3");
  assert_parsed_expression_simplify_to("[[1,2+ùê¢][3,4][5,6]]√ó[[1,2+ùê¢,3,4][5,6+ùê¢,7,8]]", "[[11+5√óùê¢,13+9√óùê¢,17+7√óùê¢,20+8√óùê¢][23,30+7√óùê¢,37,44][35,46+11√óùê¢,57,68]]");
  assert_parsed_expression_simplify_to("[[1,2][3,4]]√ó[[1,3][5,6]]√ó[[2,3][4,6]]", "[[82,123][178,267]]");
  assert_parsed_expression_simplify_to("œÄ√óconfidence(œÄ/5,3)[[1,2]]", "œÄ√óconfidence(œÄ/5,3)√ó[[1,2]]");
}

QUIZ_CASE(poincare_simplification_power) {
  assert_parsed_expression_simplify_to("3^4", "81");
  assert_parsed_expression_simplify_to("3^(-4)", "1/81");
  assert_parsed_expression_simplify_to("(-3)^3", "-27");
  assert_parsed_expression_simplify_to("1256^(1/3)√óx", "2√óroot(157,3)√óx");
  assert_parsed_expression_simplify_to("1256^(-1/3)", "1/\u00122√óroot(157,3)\u0013");
  assert_parsed_expression_simplify_to("32^(-1/5)", "1/2");
  assert_parsed_expression_simplify_to("(2+3-4)^(x)", "1");
  assert_parsed_expression_simplify_to("1^x", "1");
  assert_parsed_expression_simplify_to("x^1", "x");
  assert_parsed_expression_simplify_to("0^3", "0");
  assert_parsed_expression_simplify_to("0^0", Undefined::Name());
  assert_parsed_expression_simplify_to("0^(-3)", Undefined::Name());
  assert_parsed_expression_simplify_to("4^0.5", "2");
  assert_parsed_expression_simplify_to("8^0.5", "2√ó‚àö(2)");
  assert_parsed_expression_simplify_to("(12^4√ó3)^(0.5)", "144√ó‚àö(3)");
  assert_parsed_expression_simplify_to("(œÄ^3)^4", "œÄ^12");
  assert_parsed_expression_simplify_to("(A√óB)^3", "A^3√óB^3");
  assert_parsed_expression_simplify_to("(12^4√óx)^(0.5)", "144√ó‚àö(x)");
  assert_parsed_expression_simplify_to("‚àö(32)", "4√ó‚àö(2)");
  assert_parsed_expression_simplify_to("‚àö(-1)", "ùê¢");
  assert_parsed_expression_simplify_to("‚àö(-1√ó‚àö(-1))", "‚àö(2)/2-‚àö(2)/2√óùê¢");
  assert_parsed_expression_simplify_to("‚àö(3^2)", "3");
  assert_parsed_expression_simplify_to("2^(2+œÄ)", "4√ó2^œÄ");
  assert_parsed_expression_simplify_to("‚àö(5513219850886344455940081)", "2348024669991");
  assert_parsed_expression_simplify_to("‚àö(154355776)", "12424");
  assert_parsed_expression_simplify_to("‚àö(œÄ)^2", "œÄ");
  assert_parsed_expression_simplify_to("‚àö(œÄ^2)", "œÄ");
  assert_parsed_expression_simplify_to("‚àö((-œÄ)^2)", "œÄ");
  assert_parsed_expression_simplify_to("‚àö(x√ó144)", "12√ó‚àö(x)");
  assert_parsed_expression_simplify_to("‚àö(x√ó144√óœÄ^2)", "12√óœÄ√ó‚àö(x)");
  assert_parsed_expression_simplify_to("‚àö(x√ó144√óœÄ)", "12√ó‚àö(œÄ)√ó‚àö(x)");
  assert_parsed_expression_simplify_to("(-1)√ó(2+(-4√ó‚àö(2)))", "4√ó‚àö(2)-2");
  assert_parsed_expression_simplify_to("x^(1/2)", "‚àö(x)");
  assert_parsed_expression_simplify_to("x^(-1/2)", "1/‚àö(x)");
  assert_parsed_expression_simplify_to("x^(1/7)", "root(x,7)");
  assert_parsed_expression_simplify_to("x^(-1/7)", "1/root(x,7)");
  assert_parsed_expression_simplify_to("1/(3‚àö(2))", "‚àö(2)/6");
  assert_parsed_expression_simplify_to("‚ÑØ^ln(3)", "3");
  assert_parsed_expression_simplify_to("‚ÑØ^ln(‚àö(3))", "‚àö(3)");
  assert_parsed_expression_simplify_to("œÄ^log(‚àö(3),œÄ)", "‚àö(3)");
  assert_parsed_expression_simplify_to("10^log(œÄ)", "œÄ");
  assert_parsed_expression_simplify_to("‚ÑØ^ln(65)", "65");
  assert_parsed_expression_simplify_to("‚ÑØ^ln(œÄ‚ÑØ)", "œÄ√ó‚ÑØ");
  assert_parsed_expression_simplify_to("‚ÑØ^log(œÄ‚ÑØ)", "‚ÑØ^\u0012log(‚ÑØ)+log(œÄ)\u0013");
  assert_parsed_expression_simplify_to("‚àö(‚ÑØ^2)", "‚ÑØ");
  assert_parsed_expression_simplify_to("999^(10000/3)", "999^\u001210000/3\u0013");
  /* This does not reduce but should not as the integer is above
   * k_maxNumberOfPrimeFactors and thus it prime decomposition might overflow
   * 32 factors. */
  assert_parsed_expression_simplify_to("1881676377434183981909562699940347954480361860897069^(1/3)", "root(1881676377434183981909562699940347954480361860897069,3)");
  /* This does not reduce but should not as the prime decomposition involves
   * factors above k_maxNumberOfPrimeFactors. */
  assert_parsed_expression_simplify_to("1002101470343^(1/3)", "root(1002101470343,3)");
  assert_parsed_expression_simplify_to("œÄ√óœÄ√óœÄ", "œÄ^3");
  assert_parsed_expression_simplify_to("(x+œÄ)^(3)", "x^3+3√óœÄ√óx^2+3√óœÄ^2√óx+œÄ^3");
  assert_parsed_expression_simplify_to("(5+‚àö(2))^(-8)", "\u0012-1003320√ó‚àö(2)+1446241\u0013/78310985281");
  assert_parsed_expression_simplify_to("(5√óœÄ+‚àö(2))^(-5)", "1/\u00123125√óœÄ^5+3125√ó‚àö(2)√óœÄ^4+2500√óœÄ^3+500√ó‚àö(2)√óœÄ^2+100√óœÄ+4√ó‚àö(2)\u0013");
  assert_parsed_expression_simplify_to("(1+‚àö(2)+‚àö(3))^5", "120√ó‚àö(6)+184√ó‚àö(3)+224√ó‚àö(2)+296");
  assert_parsed_expression_simplify_to("(œÄ+‚àö(2)+‚àö(3)+x)^(-3)", "1/\u0012x^3+3√óœÄ√óx^2+3√ó‚àö(3)√óx^2+3√ó‚àö(2)√óx^2+3√óœÄ^2√óx+6√ó‚àö(3)√óœÄ√óx+6√ó‚àö(2)√óœÄ√óx+6√ó‚àö(6)√óx+15√óx+œÄ^3+3√ó‚àö(3)√óœÄ^2+3√ó‚àö(2)√óœÄ^2+6√ó‚àö(6)√óœÄ+15√óœÄ+9√ó‚àö(3)+11√ó‚àö(2)\u0013");
  assert_parsed_expression_simplify_to("1.0066666666667^60", "(10066666666667/10000000000000)^60");
  assert_parsed_expression_simplify_to("2^(6+œÄ+x)", "64√ó2^\u0012x+œÄ\u0013");
  assert_parsed_expression_simplify_to("ùê¢^(2/3)", "1/2+‚àö(3)/2√óùê¢");
  assert_parsed_expression_simplify_to("‚ÑØ^(ùê¢√óœÄ/3)", "1/2+‚àö(3)/2√óùê¢");
  assert_parsed_expression_simplify_to("(-1)^(1/3)", "1/2+‚àö(3)/2√óùê¢");
  assert_parsed_expression_simplify_to("R(-x)", "R(-x)");
  assert_parsed_expression_simplify_to("‚àö(x)^2", "x", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("‚àö(-3)^2", "unreal", User, Radian, Real);
  // Principal angle of root of unity
  assert_parsed_expression_simplify_to("(-5)^(-1/3)", "1/\u00122√óroot(5,3)\u0013-‚àö(3)/\u00122√óroot(5,3)\u0013√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("1+((8+‚àö(6))^(1/2))^-1+(8+‚àö(6))^(1/2)", "\u0012‚àö(‚àö(6)+8)+‚àö(6)+9\u0013/‚àö(‚àö(6)+8)", User, Radian, Real);
  assert_parsed_expression_simplify_to("[[1,2][3,4]]^(-3)", "[[-59/4,27/4][81/8,-37/8]]");
  assert_parsed_expression_simplify_to("[[1,2][3,4]]^3", "[[37,54][81,118]]");
}

QUIZ_CASE(poincare_simplification_factorial) {
  assert_parsed_expression_simplify_to("1/3!", "1/6");
  assert_parsed_expression_simplify_to("5!", "120");
  assert_parsed_expression_simplify_to("(1/3)!", Undefined::Name());
  assert_parsed_expression_simplify_to("œÄ!", Undefined::Name());
  assert_parsed_expression_simplify_to("‚ÑØ!", Undefined::Name());
}

QUIZ_CASE(poincare_simplification_logarithm) {
  assert_parsed_expression_simplify_to("log(0,0)", Undefined::Name());
  assert_parsed_expression_simplify_to("log(0,1)", Undefined::Name());
  assert_parsed_expression_simplify_to("log(1,0)", "0");
  assert_parsed_expression_simplify_to("log(2,0)", "0");
  assert_parsed_expression_simplify_to("log(0,14)", "-inf");
  assert_parsed_expression_simplify_to("log(0,0.14)", Infinity::Name());
  assert_parsed_expression_simplify_to("log(0,0.14+ùê¢)", Undefined::Name());
  assert_parsed_expression_simplify_to("log(2,1)", Undefined::Name());
  assert_parsed_expression_simplify_to("log(x,1)", Undefined::Name());
  assert_parsed_expression_simplify_to("log(12925)", "log(47)+log(11)+2√ólog(5)");
  assert_parsed_expression_simplify_to("ln(12925)", "ln(47)+ln(11)+2√óln(5)");
  assert_parsed_expression_simplify_to("log(1742279/12925, 6)", "-log(47,6)+log(17,6)+3√ólog(11,6)+log(7,6)-2√ólog(5,6)");
  assert_parsed_expression_simplify_to("ln(2/3)", "-ln(3)+ln(2)");
  assert_parsed_expression_simplify_to("log(1742279/12925, -6)", "log(158389/1175,-6)");
  assert_parsed_expression_simplify_to("ln(‚àö(2))", "ln(2)/2");
  assert_parsed_expression_simplify_to("ln(‚ÑØ^3)", "3");
  assert_parsed_expression_simplify_to("log(10)", "1");
  assert_parsed_expression_simplify_to("log(‚àö(3),‚àö(3))", "1");
  assert_parsed_expression_simplify_to("log(1/‚àö(2))", "-log(2)/2");
  assert_parsed_expression_simplify_to("log(-ùê¢)", "log(-ùê¢)");
  assert_parsed_expression_simplify_to("ln(‚ÑØ^(ùê¢œÄ/7))", "œÄ/7√óùê¢");
  assert_parsed_expression_simplify_to("log(10^24)", "24");
  assert_parsed_expression_simplify_to("log((23œÄ)^4,23œÄ)", "4");
  assert_parsed_expression_simplify_to("log(10^(2+œÄ))", "œÄ+2");
  assert_parsed_expression_simplify_to("ln(1881676377434183981909562699940347954480361860897069)", "ln(1881676377434183981909562699940347954480361860897069)");
  /* log(1002101470343) does no reduce to 3√ólog(10007) because it involves
   * prime factors above k_biggestPrimeFactor */
  assert_parsed_expression_simplify_to("log(1002101470343)", "log(1002101470343)");
  assert_parsed_expression_simplify_to("log(64,2)", "6");
  assert_parsed_expression_simplify_to("log(2,64)", "log(2,64)");
  assert_parsed_expression_simplify_to("log(1476225,5)", "10√ólog(3,5)+2");

  assert_parsed_expression_simplify_to("log(100)", "2");
  assert_parsed_expression_simplify_to("log(1000000)", "6");
  assert_parsed_expression_simplify_to("log(70992768,14)", "log(11,14)+log(3,14)+2√ólog(2,14)+5");
  assert_parsed_expression_simplify_to("log(1/6991712,14)", "-log(13,14)-5");
  assert_parsed_expression_simplify_to("log(4,10)", "2√ólog(2)");
}

QUIZ_CASE(poincare_simplification_random) {
  assert_parsed_expression_simplify_to("1/random()+1/3+1/4", "1/random()+7/12");
  assert_parsed_expression_simplify_to("random()+random()", "random()+random()");
  assert_parsed_expression_simplify_to("random()-random()", "-random()+random()");
  assert_parsed_expression_simplify_to("1/random()+1/3+1/4+1/random()", "1/random()+1/random()+7/12");
  assert_parsed_expression_simplify_to("random()√órandom()", "random()√órandom()");
  assert_parsed_expression_simplify_to("random()/random()", "random()/random()");
  assert_parsed_expression_simplify_to("3^random()√ó3^random()", "3^random()√ó3^random()");
  assert_parsed_expression_simplify_to("random()√óln(2)√ó3+random()√óln(2)√ó5", "5√óln(2)√órandom()+3√óln(2)√órandom()");
}

QUIZ_CASE(poincare_simplification_randint) {
  assert_parsed_expression_simplify_to("1/randint(2,2)+1/2", "1");
  assert_parsed_expression_simplify_to("randint(1, inf)", "undef");
  assert_parsed_expression_simplify_to("randint(-inf, 3)", "undef");
  assert_parsed_expression_simplify_to("randint(4, 3)", "undef");
  assert_parsed_expression_simplify_to("randint(2, 23345678909876545678)", "undef");
  assert_parsed_expression_simplify_to("randint(123456789876543, 123456789876543+10)", "undef");
}

QUIZ_CASE(poincare_simplification_function) {
  assert_parsed_expression_simplify_to("abs(œÄ)", "œÄ");
  assert_parsed_expression_simplify_to("abs(-œÄ)", "œÄ");
  assert_parsed_expression_simplify_to("abs(1+ùê¢)", "‚àö(2)");
  assert_parsed_expression_simplify_to("abs(0)", "0");
  assert_parsed_expression_simplify_to("arg(1+ùê¢)", "œÄ/4");
  assert_parsed_expression_simplify_to("binomial(20,3)", "1140");
  assert_parsed_expression_simplify_to("binomial(20,10)", "184756");
  assert_parsed_expression_simplify_to("ceil(-1.3)", "-1");
  assert_parsed_expression_simplify_to("ceil(2œÄ)", "7");
  assert_parsed_expression_simplify_to("ceil(123456789012345678901234567892/3)", "41152263004115226300411522631");
  assert_parsed_expression_simplify_to("ceil(123456789*œÄ)", "387850942");
  assert_parsed_expression_simplify_to("conj(1/2)", "1/2");
  assert_parsed_expression_simplify_to("quo(19,3)", "6");
  assert_parsed_expression_simplify_to("quo(19,0)", Infinity::Name());
  assert_parsed_expression_simplify_to("quo(-19,3)", "-7");
  assert_parsed_expression_simplify_to("rem(19,3)", "1");
  assert_parsed_expression_simplify_to("rem(-19,3)", "2");
  assert_parsed_expression_simplify_to("rem(19,0)", Infinity::Name());
  assert_parsed_expression_simplify_to("99!", "933262154439441526816992388562667004907159682643816214685929638952175999932299156089414639761565182862536979208272237582511852109168640000000000000000000000");
  assert_parsed_expression_simplify_to("factor(-10008/6895)", "-\u00122^3√ó3^2√ó139\u0013/\u00125√ó7√ó197\u0013");
  assert_parsed_expression_simplify_to("factor(1008/6895)", "\u00122^4√ó3^2\u0013/\u00125√ó197\u0013");
  assert_parsed_expression_simplify_to("factor(10007)", "10007");
  assert_parsed_expression_simplify_to("factor(10007^2)", Undefined::Name());
  assert_parsed_expression_simplify_to("floor(-1.3)", "-2");
  assert_parsed_expression_simplify_to("floor(2œÄ)", "6");
  assert_parsed_expression_simplify_to("floor(123456789012345678901234567892/3)", "41152263004115226300411522630");
  assert_parsed_expression_simplify_to("floor(123456789*œÄ)", "387850941");
  assert_parsed_expression_simplify_to("frac(-1.3)", "7/10");
  assert_parsed_expression_simplify_to("gcd(123,278)", "1");
  assert_parsed_expression_simplify_to("gcd(11,121)", "11");
  assert_parsed_expression_simplify_to("im(1+5√óùê¢)", "5");
  assert_parsed_expression_simplify_to("lcm(123,278)", "34194");
  assert_parsed_expression_simplify_to("lcm(11,121)", "121");
  assert_parsed_expression_simplify_to("‚àö(4)", "2");
  assert_parsed_expression_simplify_to("re(1+5√óùê¢)", "1");
  assert_parsed_expression_simplify_to("root(4,3)", "root(4,3)");
  assert_parsed_expression_simplify_to("root(4,œÄ)", "4^\u00121/œÄ\u0013");
  assert_parsed_expression_simplify_to("root(27,3)", "3");
  assert_parsed_expression_simplify_to("round(4.235,2)", "106/25");
  assert_parsed_expression_simplify_to("round(4.23,0)", "4");
  assert_parsed_expression_simplify_to("round(4.9,0)", "5");
  assert_parsed_expression_simplify_to("round(12.9,-1)", "10");
  assert_parsed_expression_simplify_to("round(12.9,-2)", "0");
  assert_parsed_expression_simplify_to("sign(-23)", "-1");
  assert_parsed_expression_simplify_to("sign(-ùê¢)", "sign(-ùê¢)");
  assert_parsed_expression_simplify_to("sign(0)", "0");
  assert_parsed_expression_simplify_to("sign(inf)", "1");
  assert_parsed_expression_simplify_to("sign(-inf)", "-1");
  assert_parsed_expression_simplify_to("sign(undef)", "undef");
  assert_parsed_expression_simplify_to("sign(23)", "1");
  assert_parsed_expression_simplify_to("sign(log(18))", "1");
  assert_parsed_expression_simplify_to("sign(-‚àö(2))", "-1");
  assert_parsed_expression_simplify_to("sign(x)", "sign(x)");
  assert_parsed_expression_simplify_to("sign(2+ùê¢)", "sign(2+ùê¢)");
  assert_parsed_expression_simplify_to("permute(99,4)", "90345024");
  assert_parsed_expression_simplify_to("permute(20,-10)", Undefined::Name());
  assert_parsed_expression_simplify_to("re(1/2)", "1/2");
}

QUIZ_CASE(poincare_simplication_trigonometry_functions) {
  // -- sin/cos -> tan
  assert_parsed_expression_simplify_to("sin(x)/cos(x)", "tan(x)");
  assert_parsed_expression_simplify_to("cos(x)/sin(x)", "1/tan(x)");
  assert_parsed_expression_simplify_to("sin(x)√óœÄ/cos(x)", "œÄ√ótan(x)");
  assert_parsed_expression_simplify_to("sin(x)/(œÄ√ócos(x))", "tan(x)/œÄ");
  assert_parsed_expression_simplify_to("1√ótan(2)√ótan(5)", "tan(2)√ótan(5)");
  assert_parsed_expression_simplify_to("tan(62œÄ/21)", "-tan(œÄ/21)");
  assert_parsed_expression_simplify_to("cos(26œÄ/21)/sin(25œÄ/17)", "cos(\u00125√óœÄ\u0013/21)/sin(\u00128√óœÄ\u0013/17)");
  assert_parsed_expression_simplify_to("cos(62œÄ/21)√óœÄ√ó3/sin(62œÄ/21)", "-\u00123√óœÄ\u0013/tan(œÄ/21)");
  assert_parsed_expression_simplify_to("cos(62œÄ/21)/(œÄ√ó3√ósin(62œÄ/21))", "-1/\u00123√óœÄ√ótan(œÄ/21)\u0013");
  assert_parsed_expression_simplify_to("sin(62œÄ/21)√óœÄ√ó3/cos(62œÄ/21)", "-3√óœÄ√ótan(œÄ/21)");
  assert_parsed_expression_simplify_to("sin(62œÄ/21)/(œÄ√ó3cos(62œÄ/21))", "-tan(œÄ/21)/\u00123√óœÄ\u0013");
  assert_parsed_expression_simplify_to("-cos(œÄ/62)ln(3)/(sin(œÄ/62)œÄ)", "-ln(3)/\u0012œÄ√ótan(œÄ/62)\u0013");
  assert_parsed_expression_simplify_to("-2cos(œÄ/62)ln(3)/(sin(œÄ/62)œÄ)", "-\u00122√óln(3)\u0013/\u0012œÄ√ótan(œÄ/62)\u0013");
  // -- cos
  assert_parsed_expression_simplify_to("cos(0)", "1");
  assert_parsed_expression_simplify_to("cos(œÄ)", "-1");
  assert_parsed_expression_simplify_to("cos(œÄ√ó4/7)", "-cos(\u00123√óœÄ\u0013/7)");
  assert_parsed_expression_simplify_to("cos(œÄ√ó35/29)", "-cos(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("cos(-œÄ√ó35/29)", "-cos(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("cos(œÄ√ó340000)", "1");
  assert_parsed_expression_simplify_to("cos(-œÄ√ó340001)", "-1");
  assert_parsed_expression_simplify_to("cos(-œÄ√ó‚àö(2))", "cos(‚àö(2)√óœÄ)");
  assert_parsed_expression_simplify_to("cos(1311œÄ/6)", "0");
  assert_parsed_expression_simplify_to("cos(œÄ/12)", "\u0012‚àö(6)+‚àö(2)\u0013/4");
  assert_parsed_expression_simplify_to("cos(-œÄ/12)", "\u0012‚àö(6)+‚àö(2)\u0013/4");
  assert_parsed_expression_simplify_to("cos(-œÄ17/8)", "‚àö(‚àö(2)+2)/2");
  assert_parsed_expression_simplify_to("cos(41œÄ/6)", "-‚àö(3)/2");
  assert_parsed_expression_simplify_to("cos(œÄ/4+1000œÄ)", "‚àö(2)/2");
  assert_parsed_expression_simplify_to("cos(-œÄ/3)", "1/2");
  assert_parsed_expression_simplify_to("cos(41œÄ/5)", "\u0012‚àö(5)+1\u0013/4");
  assert_parsed_expression_simplify_to("cos(7œÄ/10)", "-\u0012‚àö(2)√ó‚àö(-‚àö(5)+5)\u0013/4");
  assert_parsed_expression_simplify_to("cos(0)", "1", User, Degree);
  assert_parsed_expression_simplify_to("cos(180)", "-1", User, Degree);
  assert_parsed_expression_simplify_to("cos(720/7)", "-cos(540/7)", User, Degree);
  assert_parsed_expression_simplify_to("cos(6300/29)", "-cos(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("cos(-6300/29)", "-cos(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("cos(61200000)", "1", User, Degree);
  assert_parsed_expression_simplify_to("cos(-61200180)", "-1", User, Degree);
  assert_parsed_expression_simplify_to("cos(-180√ó‚àö(2))", "cos(180√ó‚àö(2))", User, Degree);
  assert_parsed_expression_simplify_to("cos(39330)", "0", User, Degree);
  assert_parsed_expression_simplify_to("cos(15)", "\u0012‚àö(6)+‚àö(2)\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("cos(-15)", "\u0012‚àö(6)+‚àö(2)\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("cos(-765/2)", "‚àö(‚àö(2)+2)/2", User, Degree);
  assert_parsed_expression_simplify_to("cos(7380/6)", "-‚àö(3)/2", User, Degree);
  assert_parsed_expression_simplify_to("cos(180045)", "‚àö(2)/2", User, Degree);
  assert_parsed_expression_simplify_to("cos(-60)", "1/2", User, Degree);
  assert_parsed_expression_simplify_to("cos(7380/5)", "\u0012‚àö(5)+1\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("cos(112.5)", "-‚àö(-‚àö(2)+2)/2", User, Degree);
  // -- sin
  assert_parsed_expression_simplify_to("sin(0)", "0");
  assert_parsed_expression_simplify_to("sin(œÄ)", "0");
  assert_parsed_expression_simplify_to("sin(œÄ√ó35/29)", "-sin(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("sin(-œÄ√ó35/29)", "sin(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("sin(œÄ√ó340000)", "0");
  assert_parsed_expression_simplify_to("sin(œÄ√ó340001)", "0");
  assert_parsed_expression_simplify_to("sin(-œÄ√ó340001)", "0");
  assert_parsed_expression_simplify_to("sin(œÄ/12)", "\u0012‚àö(6)-‚àö(2)\u0013/4");
  assert_parsed_expression_simplify_to("sin(-œÄ/12)", "\u0012-‚àö(6)+‚àö(2)\u0013/4");
  assert_parsed_expression_simplify_to("sin(-œÄ√ó‚àö(2))", "-sin(‚àö(2)√óœÄ)");
  assert_parsed_expression_simplify_to("sin(1311œÄ/6)", "1");
  assert_parsed_expression_simplify_to("sin(-œÄ17/8)", "-‚àö(-‚àö(2)+2)/2");
  assert_parsed_expression_simplify_to("sin(41œÄ/6)", "1/2");
  assert_parsed_expression_simplify_to("sin(-3œÄ/10)", "\u0012-‚àö(5)-1\u0013/4");
  assert_parsed_expression_simplify_to("sin(œÄ/4+1000œÄ)", "‚àö(2)/2");
  assert_parsed_expression_simplify_to("sin(-œÄ/3)", "-‚àö(3)/2");
  assert_parsed_expression_simplify_to("sin(17œÄ/5)", "-\u0012‚àö(2)√ó‚àö(‚àö(5)+5)\u0013/4");
  assert_parsed_expression_simplify_to("sin(œÄ/5)", "\u0012‚àö(2)√ó‚àö(-‚àö(5)+5)\u0013/4");
  assert_parsed_expression_simplify_to("sin(0)", "0", User, Degree);
  assert_parsed_expression_simplify_to("sin(180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("sin(6300/29)", "-sin(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("sin(-6300/29)", "sin(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("sin(61200000)", "0", User, Degree);
  assert_parsed_expression_simplify_to("sin(61200180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("sin(-61200180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("sin(15)", "\u0012‚àö(6)-‚àö(2)\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("sin(-15)", "\u0012-‚àö(6)+‚àö(2)\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("sin(-180√ó‚àö(2))", "-sin(180√ó‚àö(2))", User, Degree);
  assert_parsed_expression_simplify_to("sin(39330)", "1", User, Degree);
  assert_parsed_expression_simplify_to("sin(-765/2)", "-‚àö(-‚àö(2)+2)/2", User, Degree);
  assert_parsed_expression_simplify_to("sin(1230)", "1/2", User, Degree);
  assert_parsed_expression_simplify_to("sin(180045)", "‚àö(2)/2", User, Degree);
  assert_parsed_expression_simplify_to("sin(-60)", "-‚àö(3)/2", User, Degree);
  assert_parsed_expression_simplify_to("sin(612)", "-\u0012‚àö(2)√ó‚àö(‚àö(5)+5)\u0013/4", User, Degree);
  assert_parsed_expression_simplify_to("sin(36)", "\u0012‚àö(2)√ó‚àö(-‚àö(5)+5)\u0013/4", User, Degree);
  // -- tan
  assert_parsed_expression_simplify_to("tan(0)", "0");
  assert_parsed_expression_simplify_to("tan(œÄ)", "0");
  assert_parsed_expression_simplify_to("tan(3√óœÄ/2)", Undefined::Name());
  assert_parsed_expression_simplify_to("tan(œÄ/2)", Undefined::Name());
  assert_parsed_expression_simplify_to("tan(90)", Undefined::Name(), User, Degree);
  assert_parsed_expression_simplify_to("tan(100)", Undefined::Name(), User, Gradian);
  assert_parsed_expression_simplify_to("tan(œÄ√ó35/29)", "tan(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("tan(-œÄ√ó35/29)", "-tan(\u00126√óœÄ\u0013/29)");
  assert_parsed_expression_simplify_to("tan(œÄ√ó340000)", "0");
  assert_parsed_expression_simplify_to("tan(œÄ√ó340001)", "0");
  assert_parsed_expression_simplify_to("tan(-œÄ√ó340001)", "0");
  assert_parsed_expression_simplify_to("tan(œÄ/12)", "-‚àö(3)+2");
  assert_parsed_expression_simplify_to("tan(-œÄ/12)", "‚àö(3)-2");
  assert_parsed_expression_simplify_to("tan(-œÄ√ó‚àö(2))", "-tan(‚àö(2)√óœÄ)");
  assert_parsed_expression_simplify_to("tan(1311œÄ/6)", Undefined::Name());
  assert_parsed_expression_simplify_to("tan(-œÄ17/8)", "-‚àö(2)+1");
  assert_parsed_expression_simplify_to("tan(41œÄ/6)", "-‚àö(3)/3");
  assert_parsed_expression_simplify_to("tan(œÄ/4+1000œÄ)", "1");
  assert_parsed_expression_simplify_to("tan(-œÄ/3)", "-‚àö(3)");
  assert_parsed_expression_simplify_to("tan(-œÄ/10)", "-\u0012‚àö(5)√ó‚àö(-2√ó‚àö(5)+5)\u0013/5");
  assert_parsed_expression_simplify_to("tan(0)", "0", User, Degree);
  assert_parsed_expression_simplify_to("tan(180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("tan(6300/29)", "tan(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("tan(-6300/29)", "-tan(1080/29)", User, Degree);
  assert_parsed_expression_simplify_to("tan(61200000)", "0", User, Degree);
  assert_parsed_expression_simplify_to("tan(61200180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("tan(-61200180)", "0", User, Degree);
  assert_parsed_expression_simplify_to("tan(15)", "-‚àö(3)+2", User, Degree);
  assert_parsed_expression_simplify_to("tan(-15)", "‚àö(3)-2", User, Degree);
  assert_parsed_expression_simplify_to("tan(-180√ó‚àö(2))", "-tan(180√ó‚àö(2))", User, Degree);
  assert_parsed_expression_simplify_to("tan(39330)", Undefined::Name(), User, Degree);
  assert_parsed_expression_simplify_to("tan(-382.5)", "-‚àö(2)+1", User, Degree);
  assert_parsed_expression_simplify_to("tan(1230)", "-‚àö(3)/3", User, Degree);
  assert_parsed_expression_simplify_to("tan(180045)", "1", User, Degree);
  assert_parsed_expression_simplify_to("tan(-60)", "-‚àö(3)", User, Degree);
  assert_parsed_expression_simplify_to("tan(tan(tan(tan(9))))", "tan(tan(tan(tan(9))))");
  // -- acos
  assert_parsed_expression_simplify_to("acos(-1/2)", "\u00122√óœÄ\u0013/3");
  assert_parsed_expression_simplify_to("acos(-1.2)", "-acos(6/5)+œÄ");
  assert_parsed_expression_simplify_to("acos(cos(2/3))", "2/3");
  assert_parsed_expression_simplify_to("acos(cos(3/2))", "3/2");
  assert_parsed_expression_simplify_to("cos(acos(3/2))", "3/2");
  assert_parsed_expression_simplify_to("cos(acos(2/3))", "2/3");
  assert_parsed_expression_simplify_to("acos(cos(12))", "acos(cos(12))");
  assert_parsed_expression_simplify_to("acos(cos(4œÄ/7))", "\u00124√óœÄ\u0013/7");
  assert_parsed_expression_simplify_to("acos(-cos(2))", "œÄ-2");
  assert_parsed_expression_simplify_to("acos(-1/2)", "120", User, Degree);
  assert_parsed_expression_simplify_to("acos(-1.2)", "-acos(6/5)+180", User, Degree);
  assert_parsed_expression_simplify_to("acos(cos(2/3))", "2/3", User, Degree);
  assert_parsed_expression_simplify_to("acos(cos(190))", "170", User, Degree);
  assert_parsed_expression_simplify_to("acos(cos(75))", "75", User, Degree);
  assert_parsed_expression_simplify_to("cos(acos(190))", "190", User, Degree);
  assert_parsed_expression_simplify_to("cos(acos(75))", "75", User, Degree);
  assert_parsed_expression_simplify_to("acos(cos(12))", "12", User, Degree);
  assert_parsed_expression_simplify_to("acos(cos(720/7))", "720/7", User, Degree);
  // -- asin
  assert_parsed_expression_simplify_to("asin(-1/2)", "-œÄ/6");
  assert_parsed_expression_simplify_to("asin(-1.2)", "-asin(6/5)");
  assert_parsed_expression_simplify_to("asin(sin(2/3))", "2/3");
  assert_parsed_expression_simplify_to("sin(asin(2/3))", "2/3");
  assert_parsed_expression_simplify_to("sin(asin(3/2))", "3/2");
  assert_parsed_expression_simplify_to("asin(sin(3/2))", "3/2");
  assert_parsed_expression_simplify_to("asin(sin(12))", "asin(sin(12))");
  assert_parsed_expression_simplify_to("asin(sin(-œÄ/7))", "-œÄ/7");
  assert_parsed_expression_simplify_to("asin(sin(-‚àö(2)))", "-‚àö(2)");
  assert_parsed_expression_simplify_to("asin(-1/2)", "-30", User, Degree);
  assert_parsed_expression_simplify_to("asin(-1.2)", "-asin(6/5)", User, Degree);
  assert_parsed_expression_simplify_to("asin(sin(75))", "75", User, Degree);
  assert_parsed_expression_simplify_to("sin(asin(75))", "75", User, Degree);
  assert_parsed_expression_simplify_to("sin(asin(190))", "190", User, Degree);
  assert_parsed_expression_simplify_to("asin(sin(32))", "32", User, Degree);
  assert_parsed_expression_simplify_to("asin(sin(400))", "40", User, Degree);
  assert_parsed_expression_simplify_to("asin(sin(-180/7))", "-180/7", User, Degree);
  // -- atan
  assert_parsed_expression_simplify_to("atan(-1)", "-œÄ/4");
  assert_parsed_expression_simplify_to("atan(-1.2)", "-atan(6/5)");
  assert_parsed_expression_simplify_to("atan(tan(2/3))", "2/3");
  assert_parsed_expression_simplify_to("tan(atan(2/3))", "2/3");
  assert_parsed_expression_simplify_to("tan(atan(5/2))", "5/2");
  assert_parsed_expression_simplify_to("atan(tan(5/2))", "atan(tan(5/2))");
  assert_parsed_expression_simplify_to("atan(tan(5/2))", "atan(tan(5/2))");
  assert_parsed_expression_simplify_to("atan(tan(-œÄ/7))", "-œÄ/7");
  assert_parsed_expression_simplify_to("atan(‚àö(3))", "œÄ/3");
  assert_parsed_expression_simplify_to("atan(tan(-‚àö(2)))", "-‚àö(2)");
  assert_parsed_expression_simplify_to("atan(-1)", "-45", User, Degree);
  assert_parsed_expression_simplify_to("atan(-1.2)", "-atan(6/5)", User, Degree);
  assert_parsed_expression_simplify_to("atan(tan(-45))", "-45", User, Degree);
  assert_parsed_expression_simplify_to("tan(atan(120))", "120", User, Degree);
  assert_parsed_expression_simplify_to("tan(atan(2293))", "2293", User, Degree);
  assert_parsed_expression_simplify_to("atan(tan(2293))", "-47", User, Degree);
  assert_parsed_expression_simplify_to("atan(tan(1808))", "8", User, Degree);
  assert_parsed_expression_simplify_to("atan(tan(-180/7))", "-180/7", User, Degree);
  assert_parsed_expression_simplify_to("atan(‚àö(3))", "60", User, Degree);
  assert_parsed_expression_simplify_to("atan(1/x)", "\u0012œÄ√ósign(x)-2√óatan(x)\u0013/2", User, Degree);

  // cos(asin)
  assert_parsed_expression_simplify_to("cos(asin(x))", "‚àö(-x^2+1)", User, Degree);
  assert_parsed_expression_simplify_to("cos(asin(-x))", "‚àö(-x^2+1)", User, Degree);
  // cos(atan)
  assert_parsed_expression_simplify_to("cos(atan(x))", "1/‚àö(x^2+1)", User, Degree);
  assert_parsed_expression_simplify_to("cos(atan(-x))", "1/‚àö(x^2+1)", User, Degree);
  // sin(acos)
  assert_parsed_expression_simplify_to("sin(acos(x))", "‚àö(-x^2+1)", User, Degree);
  assert_parsed_expression_simplify_to("sin(acos(-x))", "‚àö(-x^2+1)", User, Degree);
  // sin(atan)
  assert_parsed_expression_simplify_to("sin(atan(x))", "x/‚àö(x^2+1)", User, Degree);
  assert_parsed_expression_simplify_to("sin(atan(-x))", "-x/‚àö(x^2+1)", User, Degree);
  // tan(acos)
  assert_parsed_expression_simplify_to("tan(acos(x))", "‚àö(-x^2+1)/x", User, Degree);
  assert_parsed_expression_simplify_to("tan(acos(-x))", "-‚àö(-x^2+1)/x", User, Degree);
  // tan(asin)
  assert_parsed_expression_simplify_to("tan(asin(x))", "x/‚àö(-x^2+1)", User, Degree);
  assert_parsed_expression_simplify_to("tan(asin(-x))", "-x/‚àö(-x^2+1)", User, Degree);
}

QUIZ_CASE(poincare_simplication_hyperbolic_trigonometry_functions) {
  assert_parsed_expression_simplify_to("sinh(0)", "0");
  assert_parsed_expression_simplify_to("cosh(0)", "1");
  assert_parsed_expression_simplify_to("tanh(0)", "0");
  assert_parsed_expression_simplify_to("asinh(0)", "0");
  assert_parsed_expression_simplify_to("acosh(1)", "0");
  assert_parsed_expression_simplify_to("atanh(0)", "0");
}

QUIZ_CASE(poincare_simplication_matrix) {
  // Addition Matrix
  assert_parsed_expression_simplify_to("1+[[1,2,3][4,5,6]]", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]+1", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2][3,4]]+[[1,2,3][4,5,6]]", Undefined::Name());
  assert_parsed_expression_simplify_to("2+[[1,2,3][4,5,6]]+[[1,2,3][4,5,6]]", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]+cos(2)+[[1,2,3][4,5,6]]", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]+[[1,2,3][4,5,6]]", "[[2,4,6][8,10,12]]");

  // Multiplication Matrix
  assert_parsed_expression_simplify_to("2*[[1,2,3][4,5,6]]", "[[2,4,6][8,10,12]]");
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]√ó‚àö(2)", "[[‚àö(2),2√ó‚àö(2),3√ó‚àö(2)][4√ó‚àö(2),5√ó‚àö(2),6√ó‚àö(2)]]");
  assert_parsed_expression_simplify_to("[[1,2][3,4]]*[[1,2,3][4,5,6]]", "[[9,12,15][19,26,33]]");
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]*[[1,2][2,3][5,6]]", "[[20,26][44,59]]");
  assert_parsed_expression_simplify_to("[[1,2,3,4][4,5,6,5]]*[[1,2][2,3][5,6]]", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2][3,4]]^(-3)*[[1,2][3,4]]", "[[11/2,-5/2][-15/4,7/4]]");
  assert_parsed_expression_simplify_to("[[1,2][3,4]]^(-3)*[[1,2,3][3,4,5]]*[[1,2][3,2][4,5]]*4", "[[-176,-186][122,129]]");

  // Power Matrix
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6][7,8,9]]^3", "[[468,576,684][1062,1305,1548][1656,2034,2412]]");
  assert_parsed_expression_simplify_to("[[1,2,3][4,5,6]]^(-1)", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,2][3,4]]^(-1)", "[[-2,1][3/2,-1/2]]");

  // Determinant
  assert_parsed_expression_simplify_to("det(œÄ+œÄ)", "2√óœÄ");
  assert_parsed_expression_simplify_to("det([[œÄ+œÄ]])", "2√óœÄ");
  assert_parsed_expression_simplify_to("det([[1,2][3,4]])", "-2");
  assert_parsed_expression_simplify_to("det([[2,2][3,4]])", "2");
  assert_parsed_expression_simplify_to("det([[2,2][3,4][3,4]])", Undefined::Name());
  assert_parsed_expression_simplify_to("det([[2,2][3,3]])", "0");
  assert_parsed_expression_simplify_to("det([[1,2,3][4,5,6][7,8,9]])", "0");
  assert_parsed_expression_simplify_to("det([[1,2,3][4,5,6][7,8,9]])", "0");
  assert_parsed_expression_simplify_to("det([[1,2,3][4œÄ,5,6][7,8,9]])", "24√óœÄ-24");
  assert_parsed_expression_simplify_to("det(identity(5))", "1");

  // Dimension
  assert_parsed_expression_simplify_to("dim(3)", "[[1,1]]");
  assert_parsed_expression_simplify_to("dim([[1/‚àö(2),1/2,3][2,1,-3]])", "[[2,3]]");

  // Inverse
  assert_parsed_expression_simplify_to("inverse([[1/‚àö(2),1/2,3][2,1,-3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("inverse([[1,2][3,4]])", "[[-2,1][3/2,-1/2]]");
  assert_parsed_expression_simplify_to("inverse([[œÄ,2√óœÄ][3,2]])", "[[-1/\u00122√óœÄ\u0013,1/2][3/\u00124√óœÄ\u0013,-1/4]]");

  // Trace
  assert_parsed_expression_simplify_to("trace([[1/‚àö(2),1/2,3][2,1,-3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("trace([[‚àö(2),2][4,3+log(3)]])", "log(3)+‚àö(2)+3");
  assert_parsed_expression_simplify_to("trace(‚àö(2)+log(3))", "log(3)+‚àö(2)");

  // Transpose
  assert_parsed_expression_simplify_to("transpose([[1/‚àö(2),1/2,3][2,1,-3]])", "[[‚àö(2)/2,2][1/2,1][3,-3]]");
  assert_parsed_expression_simplify_to("transpose(‚àö(4))", "2");

  // Expressions with unreduced matrix
  assert_simplify("confidence(cos(2)/25,3)‚Üía");
  // Check that matrices are not permuted in multiplication
  assert_parsed_expression_simplify_to("cos(3a)*abs(transpose(a))", "cos(3√óconfidence(cos(2)/25,3))√óabs(transpose(confidence(cos(2)/25,3)))");
  assert_parsed_expression_simplify_to("abs(transpose(a))*cos(3a)", "abs(transpose(confidence(cos(2)/25,3)))√ócos(3√óconfidence(cos(2)/25,3))");
  Ion::Storage::sharedStorage()->recordNamed("a.exp").destroy();
}

QUIZ_CASE(poincare_simplification_functions_of_matrices) {
  assert_parsed_expression_simplify_to("abs([[1,-1][2,-3]])", "[[1,1][2,3]]");
  assert_parsed_expression_simplify_to("acos([[1/‚àö(2),1/2][1,-1]])", "[[œÄ/4,œÄ/3][0,œÄ]]");
  assert_parsed_expression_simplify_to("acos([[1,0]])", "[[0,œÄ/2]]");
  assert_parsed_expression_simplify_to("asin([[1/‚àö(2),1/2][1,-1]])", "[[œÄ/4,œÄ/6][œÄ/2,-œÄ/2]]");
  assert_parsed_expression_simplify_to("asin([[1,0]])", "[[œÄ/2,0]]");
  assert_parsed_expression_simplify_to("atan([[‚àö(3),1][1/‚àö(3),-1]])", "[[œÄ/3,œÄ/4][œÄ/6,-œÄ/4]]");
  assert_parsed_expression_simplify_to("atan([[1,0]])", "[[œÄ/4,0]]");
  assert_parsed_expression_simplify_to("binomial([[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("binomial(1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("binomial([[0,180]],[[1]])", Undefined::Name());
  assert_parsed_expression_simplify_to("ceil([[0.3,180]])", "[[1,180]]");
  assert_parsed_expression_simplify_to("arg([[1,1+ùê¢]])", "[[0,œÄ/4]]");
  assert_parsed_expression_simplify_to("confidence([[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("confidence(1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("confidence([[0,180]],[[1]])", Undefined::Name());
  assert_parsed_expression_simplify_to("confidence(1/3, 25)", "[[2/15,8/15]]");
  assert_parsed_expression_simplify_to("confidence(45, 25)", Undefined::Name());
  assert_parsed_expression_simplify_to("confidence(1/3, -34)", Undefined::Name());
  assert_parsed_expression_simplify_to("conj([[1,1+ùê¢]])", "[[1,1-ùê¢]]");
  assert_parsed_expression_simplify_to("cos([[œÄ/3,0][œÄ/7,œÄ/2]])", "[[1/2,1][cos(œÄ/7),0]]");
  assert_parsed_expression_simplify_to("cos([[0,œÄ]])", "[[1,-1]]");
  assert_parsed_expression_simplify_to("diff([[0,180]],x,1)", Undefined::Name());
  assert_parsed_expression_simplify_to("diff(1,x,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("quo([[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("quo(1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("quo([[0,180]],[[1]])", Undefined::Name());
  assert_parsed_expression_simplify_to("rem([[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("rem(1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("rem([[0,180]],[[1]])", Undefined::Name());
  assert_parsed_expression_simplify_to("factor([[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("[[1,3]]!", "[[1,6]]");
  assert_parsed_expression_simplify_to("[[1,2][3,4]]!", "[[1,2][6,24]]");
  assert_parsed_expression_simplify_to("floor([[1/‚àö(2),1/2][1,-1.3]])", "[[0,0][1,-2]]");
  assert_parsed_expression_simplify_to("floor([[0.3,180]])", "[[0,180]]");
  assert_parsed_expression_simplify_to("frac([[1/‚àö(2),1/2][1,-1.3]])", "[[frac(‚àö(2)/2),1/2][0,7/10]]");
  assert_parsed_expression_simplify_to("frac([[0.3,180]])", "[[3/10,0]]");
  assert_parsed_expression_simplify_to("gcd([[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("gcd(1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("gcd([[0,180]],[[1]])", Undefined::Name());
  assert_parsed_expression_simplify_to("acosh([[0,œÄ]])", "[[acosh(0),acosh(œÄ)]]");
  assert_parsed_expression_simplify_to("asinh([[0,œÄ]])", "[[0,asinh(œÄ)]]");
  assert_parsed_expression_simplify_to("atanh([[0,œÄ]])", "[[0,atanh(œÄ)]]");
  assert_parsed_expression_simplify_to("cosh([[0,œÄ]])", "[[1,cosh(œÄ)]]");
  assert_parsed_expression_simplify_to("sinh([[0,œÄ]])", "[[0,sinh(œÄ)]]");
  assert_parsed_expression_simplify_to("tanh([[0,œÄ]])", "[[0,tanh(œÄ)]]");
  assert_parsed_expression_simplify_to("im([[1/‚àö(2),1/2][1,-1]])", "[[0,0][0,0]]");
  assert_parsed_expression_simplify_to("im([[1,1+ùê¢]])", "[[0,1]]");
  assert_parsed_expression_simplify_to("int([[0,180]],x,1,2)", Undefined::Name());
  assert_parsed_expression_simplify_to("int(1,x,[[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("int(1,x,1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("log([[2,3]])", "[[log(2),log(3)]]");
  assert_parsed_expression_simplify_to("log([[2,3]],5)", "[[log(2,5),log(3,5)]]");
  assert_parsed_expression_simplify_to("log(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("log([[‚àö(2),1/2][1,3]])", "[[log(2)/2,-log(2)][0,log(3)]]");
  assert_parsed_expression_simplify_to("log([[1/‚àö(2),1/2][1,-3]])", "[[-log(2)/2,-log(2)][0,log(-3)]]"); // ComplexFormat is Cartesian
  assert_parsed_expression_simplify_to("log([[1/‚àö(2),1/2][1,-3]],3)", "[[-log(2,3)/2,-log(2,3)][0,log(-3,3)]]");
  assert_parsed_expression_simplify_to("ln([[2,3]])", "[[ln(2),ln(3)]]");
  assert_parsed_expression_simplify_to("ln([[‚àö(2),1/2][1,3]])", "[[ln(2)/2,-ln(2)][0,ln(3)]]");
  assert_parsed_expression_simplify_to("root([[2,3]],5)", Undefined::Name());
  assert_parsed_expression_simplify_to("root(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("-[[1/‚àö(2),1/2,3][2,1,-3]]", "[[-‚àö(2)/2,-1/2,-3][-2,-1,3]]");
  assert_parsed_expression_simplify_to("permute([[2,3]],5)", Undefined::Name());
  assert_parsed_expression_simplify_to("permute(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction([[2,3]],5)", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction95([[2,3]],5)", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction95(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction95(1/3, 25)", "[[\u0012-49√ó‚àö(2)+125\u0013/375,\u001249√ó‚àö(2)+125\u0013/375]]");
  assert_parsed_expression_simplify_to("prediction95(45, 25)", Undefined::Name());
  assert_parsed_expression_simplify_to("prediction95(1/3, -34)", Undefined::Name());
  assert_parsed_expression_simplify_to("product(1,x,[[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("product(1,x,1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("randint([[2,3]],5)", Undefined::Name());
  assert_parsed_expression_simplify_to("randint(5,[[2,3]])", Undefined::Name());
  assert_parsed_expression_simplify_to("re([[1,ùê¢]])", "[[1,0]]");
  assert_parsed_expression_simplify_to("round([[2.12,3.42]], 1)", "[[21/10,17/5]]");
  assert_parsed_expression_simplify_to("round(1.3, [[2.1,3.4]])", Undefined::Name());
  assert_parsed_expression_simplify_to("round(1.3, [[2.1,3.4]])", Undefined::Name());
  assert_parsed_expression_simplify_to("sign([[2.1,3.4]])", Undefined::Name());
  assert_parsed_expression_simplify_to("sin([[œÄ/3,0][œÄ/7,œÄ/2]])", "[[‚àö(3)/2,0][sin(œÄ/7),1]]");
  assert_parsed_expression_simplify_to("sin([[0,œÄ]])", "[[0,0]]");
  assert_parsed_expression_simplify_to("sum(1,x,[[0,180]],1)", Undefined::Name());
  assert_parsed_expression_simplify_to("sum(1,x,1,[[0,180]])", Undefined::Name());
  assert_parsed_expression_simplify_to("‚àö([[2.1,3.4]])", Undefined::Name());
  assert_parsed_expression_simplify_to("[[2,3.4]]-[[0.1,3.1]]", "[[19/10,3/10]]");
  assert_parsed_expression_simplify_to("[[2,3.4]]-1", Undefined::Name());
  assert_parsed_expression_simplify_to("1-[[0.1,3.1]]", Undefined::Name());
  assert_parsed_expression_simplify_to("tan([[0,œÄ/4]])", "[[0,1]]");
}

QUIZ_CASE(poincare_simplification_store) {
  assert_parsed_expression_simplify_to("1+2‚Üíx", "3");
  assert_parsed_expression_simplify_to("0.1+0.2‚Üíx", "3/10");
  assert_parsed_expression_simplify_to("a+a‚Üíx", "2√óa");

  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("x.exp").destroy();
}

QUIZ_CASE(poincare_simplification_store_matrix) {
  assert_parsed_expression_simplify_to("1+1‚Üía", "2");
  assert_parsed_expression_simplify_to("[[8]]‚Üíf(x)", "[[8]]");
  assert_parsed_expression_simplify_to("[[x]]‚Üíf(x)", "[[x]]");

  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("a.exp").destroy();
  Ion::Storage::sharedStorage()->recordNamed("f.func").destroy();
}

QUIZ_CASE(poincare_simplification_complex_format) {
  // Real
  assert_parsed_expression_simplify_to("ùê¢", "unreal", User, Radian, Real);
  assert_parsed_expression_simplify_to("‚àö(-1)", "unreal", User, Radian, Real);
  assert_parsed_expression_simplify_to("‚àö(-1)√ó‚àö(-1)", "unreal", User, Radian, Real);
  assert_parsed_expression_simplify_to("ln(-2)", "unreal", User, Radian, Real);
  assert_parsed_expression_simplify_to("(-8)^(2/3)", "4", User, Radian, Real);
  assert_parsed_expression_simplify_to("(-8)^(2/5)", "2√óroot(2,5)", User, Radian, Real);
  assert_parsed_expression_simplify_to("(-8)^(1/5)", "-root(8,5)", User, Radian, Real);
  assert_parsed_expression_simplify_to("(-8)^(1/4)", "unreal", User, Radian, Real);
  assert_parsed_expression_simplify_to("(-8)^(1/3)", "-2", User, Radian, Real);
  assert_parsed_expression_simplify_to("[[1,2+‚àö(-1)]]", "unreal", User, Radian, Real);

  // User defined variable
  assert_parsed_expression_simplify_to("a", "a", User, Radian, Real);
  // a = 2+i
  assert_simplify("2+ùê¢‚Üía", Radian, Real);
  assert_parsed_expression_simplify_to("a", "unreal", User, Radian, Real);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("a.exp").destroy();
  // User defined function
  assert_parsed_expression_simplify_to("f(3)", "f(3)", User, Radian, Real);
  // f : x ‚Üí x+1
  assert_simplify("x+1+ùê¢‚Üíf(x)", Radian, Real);
  assert_parsed_expression_simplify_to("f(3)", "unreal", User, Radian, Real);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("f.func").destroy();


  // Cartesian
  assert_parsed_expression_simplify_to("-2.3·¥á3", "-2300", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("3", "3", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("inf", "inf", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("1+2+ùê¢", "3+ùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("-(5+2√óùê¢)", "-5-2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(5+2√óùê¢)", "5+2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("ùê¢+ùê¢", "2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("-2+2√óùê¢", "-2+2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(3+ùê¢)-(2+4√óùê¢)", "1-3√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(2+3√óùê¢)√ó(4-2√óùê¢)", "14+8√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(3+ùê¢)/2", "3/2+1/2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(3+ùê¢)/(2+ùê¢)", "7/5-1/5√óùê¢", User, Radian, Cartesian);
  // The simplification of (3+ùê¢)^(2+ùê¢) in a Cartesian complex form generates to many nodes
  //assert_parsed_expression_simplify_to("(3+ùê¢)^(2+ùê¢)", "10√ócos((-4√óatan(3)+ln(2)+ln(5)+2√óœÄ)/2)√ó‚ÑØ^((2√óatan(3)-œÄ)/2)+10√ósin((-4√óatan(3)+ln(2)+ln(5)+2√óœÄ)/2)√ó‚ÑØ^((2√óatan(3)-œÄ)/2)ùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(3+ùê¢)^(2+ùê¢)", "(ùê¢+3)^\u0012ùê¢+2\u0013", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("‚àö(1+6ùê¢)", "‚àö(2√ó‚àö(37)+2)/2+‚àö(2√ó‚àö(37)-2)/2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("(1+ùê¢)^2", "2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("2√óùê¢", "2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("ùê¢!", "ùê¢!", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("3!", "6", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("x!", "x!", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("‚ÑØ", "‚ÑØ", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("œÄ", "œÄ", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("ùê¢", "ùê¢", User, Radian, Cartesian);

  assert_parsed_expression_simplify_to("abs(-3)", "3", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("abs(-3+ùê¢)", "‚àö(10)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("atan(2)", "atan(2)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("atan(2+ùê¢)", "atan(2+ùê¢)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("binomial(10, 4)", "210", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("ceil(-1.3)", "-1", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("arg(-2)", "œÄ", User, Radian, Cartesian);
  // TODO: confidence is not simplified yet
  //assert_parsed_expression_simplify_to("confidence(-2,-3)", "confidence(-2)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("conj(-2)", "-2", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("conj(-2+2√óùê¢+ùê¢)", "-2-3√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("cos(12)", "cos(12)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("cos(12+ùê¢)", "cos(12+ùê¢)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("diff(3√óx, x, 3)", "diff(3√óx,x,3)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("quo(34,x)", "quo(34,x)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("rem(5,3)", "2", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("floor(x)", "floor(x)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("frac(x)", "frac(x)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("gcd(x,y)", "gcd(x,y)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("im(1+ùê¢)", "1", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("int(x^2, x, 1, 2)", "int(x^2,x,1,2)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("lcm(x,y)", "lcm(x,y)", User, Radian, Cartesian);
  // TODO: dim is not simplified yet
  //assert_parsed_expression_simplify_to("dim(x)", "dim(x)", User, Radian, Cartesian);

  assert_parsed_expression_simplify_to("root(2,ùê¢)", "cos(ln(2))-sin(ln(2))√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("root(2,ùê¢+1)", "‚àö(2)√ócos(\u001290√óln(2)\u0013/œÄ)-‚àö(2)√ósin(\u001290√óln(2)\u0013/œÄ)√óùê¢", User, Degree, Cartesian);
  assert_parsed_expression_simplify_to("root(2,ùê¢+1)", "‚àö(2)√ócos(ln(2)/2)-‚àö(2)√ósin(ln(2)/2)√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("permute(10, 4)", "5040", User, Radian, Cartesian);
  // TODO: prediction is not simplified yet
  //assert_parsed_expression_simplify_to("prediction(-2,-3)", "prediction(-2)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("randint(2,2)", "2", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("random()", "random()", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("re(x)", "re(x)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("round(x,y)", "round(x,y)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("sign(x)", "sign(x)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("sin(23)", "sin(23)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("sin(23+ùê¢)", "sin(23+ùê¢)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("‚àö(1-ùê¢)", "‚àö(2√ó‚àö(2)+2)/2-‚àö(2√ó‚àö(2)-2)/2√óùê¢", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("tan(23)", "tan(23)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("tan(23+ùê¢)", "tan(23+ùê¢)", User, Radian, Cartesian);
  assert_parsed_expression_simplify_to("[[1,‚àö(-1)]]", "[[1,ùê¢]]", User, Radian, Cartesian);

  // User defined variable
  assert_parsed_expression_simplify_to("a", "a", User, Radian, Cartesian);
  // a = 2+i
  assert_simplify("2+ùê¢‚Üía", Radian, Cartesian);
  assert_parsed_expression_simplify_to("a", "2+ùê¢", User, Radian, Cartesian);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("a.exp").destroy();
  // User defined function
  assert_parsed_expression_simplify_to("f(3)", "f(3)", User, Radian, Cartesian);
  // f : x ‚Üí x+1
  assert_simplify("x+1+ùê¢‚Üíf(x)", Radian, Cartesian);
  assert_parsed_expression_simplify_to("f(3)", "4+ùê¢", User, Radian, Cartesian);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("f.func").destroy();

  // Polar
  assert_parsed_expression_simplify_to("-2.3·¥á3", "2300√ó‚ÑØ^\u0012œÄ√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("3", "3", User, Radian, Polar);
  assert_parsed_expression_simplify_to("inf", "inf", User, Radian, Polar);
  assert_parsed_expression_simplify_to("1+2+ùê¢", "‚àö(10)√ó‚ÑØ^\u0012\u0012-2√óatan(3)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("1+2+ùê¢", "‚àö(10)√ó‚ÑØ^\u0012\u0012-œÄ√óatan(3)+90√óœÄ\u0013/180√óùê¢\u0013", User, Degree, Polar);
  assert_parsed_expression_simplify_to("-(5+2√óùê¢)", "‚àö(29)√ó‚ÑØ^\u0012\u0012-2√óatan(5/2)-œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(5+2√óùê¢)", "‚àö(29)√ó‚ÑØ^\u0012\u0012-2√óatan(5/2)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("ùê¢+ùê¢", "2√ó‚ÑØ^\u0012œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("ùê¢+ùê¢", "2√ó‚ÑØ^\u0012œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("-2+2√óùê¢", "2√ó‚àö(2)√ó‚ÑØ^\u0012\u00123√óœÄ\u0013/4√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(3+ùê¢)-(2+4√óùê¢)", "‚àö(10)√ó‚ÑØ^\u0012\u00122√óatan(1/3)-œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(2+3√óùê¢)√ó(4-2√óùê¢)", "2√ó‚àö(65)√ó‚ÑØ^\u0012\u0012-2√óatan(7/4)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(3+ùê¢)/2", "‚àö(10)/2√ó‚ÑØ^\u0012\u0012-2√óatan(3)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(3+ùê¢)/(2+ùê¢)", "‚àö(2)√ó‚ÑØ^\u0012\u00122√óatan(7)-œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  // TODO: simplify atan(tan(x)) = x¬±k√ópi?
  //assert_parsed_expression_simplify_to("(3+ùê¢)^(2+ùê¢)", "10‚ÑØ^\u0012\u00122√óatan(3)-œÄ\u0013/2\u0013√ó‚ÑØ^\u0012\u0012\u0012-4√óatan(3)+ln(2)+ln(5)+2œÄ\u0013/2\u0013ùê¢\u0013", User, Radian, Polar);
  // The simplification of (3+ùê¢)^(2+ùê¢) in a Polar complex form generates to many nodes
  //assert_parsed_expression_simplify_to("(3+ùê¢)^(2+ùê¢)", "10‚ÑØ^\u0012\u00122√óatan(3)-œÄ\u0013/2\u0013√ó‚ÑØ^\u0012\u0012atan(tan((-4√óatan(3)+ln(2)+ln(5)+2√óœÄ)/2))+œÄ\u0013ùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(3+ùê¢)^(2+ùê¢)", "(ùê¢+3)^\u0012ùê¢+2\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("(1+ùê¢)^2", "2√ó‚ÑØ^\u0012œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("2√óùê¢", "2√ó‚ÑØ^\u0012œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("3!", "6", User, Radian, Polar);
  assert_parsed_expression_simplify_to("x!", "x!", User, Radian, Polar);
  assert_parsed_expression_simplify_to("‚ÑØ", "‚ÑØ", User, Radian, Polar);
  assert_parsed_expression_simplify_to("œÄ", "œÄ", User, Radian, Polar);
  assert_parsed_expression_simplify_to("ùê¢", "‚ÑØ^\u0012œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("abs(-3)", "3", User, Radian, Polar);
  assert_parsed_expression_simplify_to("abs(-3+ùê¢)", "‚àö(10)", User, Radian, Polar);
  assert_parsed_expression_simplify_to("conj(2√ó‚ÑØ^(ùê¢√óœÄ/2))", "2√ó‚ÑØ^\u0012-œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("-2√ó‚ÑØ^(ùê¢√óœÄ/2)", "2√ó‚ÑØ^\u0012-œÄ/2√óùê¢\u0013", User, Radian, Polar);
  assert_parsed_expression_simplify_to("[[1,‚àö(-1)]]", "[[1,‚ÑØ^\u0012œÄ/2√óùê¢\u0013]]", User, Radian, Polar);

  // User defined variable
  assert_parsed_expression_simplify_to("a", "a", User, Radian, Polar);
  // a = 2 + ùê¢
  assert_simplify("2+ùê¢‚Üía", Radian, Polar);
  assert_parsed_expression_simplify_to("a", "‚àö(5)√ó‚ÑØ^\u0012\u0012-2√óatan(2)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("a.exp").destroy();
  // User defined function
  assert_parsed_expression_simplify_to("f(3)", "f(3)", User, Radian, Polar);
  // f: x ‚Üí x+1
  assert_simplify("x+1+ùê¢‚Üíf(x)", Radian, Polar);
  assert_parsed_expression_simplify_to("f(3)", "‚àö(17)√ó‚ÑØ^\u0012\u0012-2√óatan(4)+œÄ\u0013/2√óùê¢\u0013", User, Radian, Polar);
  // Clean the storage for other tests
  Ion::Storage::sharedStorage()->recordNamed("f.func").destroy();
}

QUIZ_CASE(poincare_simplification_reduction_target) {
  assert_parsed_expression_simplify_to("1/œÄ+1/x", "1/x+1/œÄ", System);
  assert_parsed_expression_simplify_to("1/œÄ+1/x", "\u0012x+œÄ\u0013/\u0012œÄ√óx\u0013", User);

  assert_parsed_expression_simplify_to("1/(1+ùê¢)", "1/\u0012ùê¢+1\u0013", System);
  assert_parsed_expression_simplify_to("1/(1+ùê¢)", "1/2-1/2√óùê¢", User);

  assert_parsed_expression_simplify_to("sin(x)/(cos(x)√ócos(x))", "sin(x)/cos(x)^2", System);
  assert_parsed_expression_simplify_to("sin(x)/(cos(x)√ócos(x))", "tan(x)/cos(x)", User);

  assert_parsed_expression_simplify_to("x^0", "x^0", System);
  assert_parsed_expression_simplify_to("x^0", "1", User);

  assert_parsed_expression_simplify_to("x^(2/3)", "root(x,3)^2", System);
  assert_parsed_expression_simplify_to("x^(2/3)", "x^\u00122/3\u0013", User);
  assert_parsed_expression_simplify_to("x^(1/3)", "root(x,3)", System);
  assert_parsed_expression_simplify_to("x^(1/3)", "root(x,3)", System);
  assert_parsed_expression_simplify_to("x^2", "x^2", System);
  assert_parsed_expression_simplify_to("x^2", "x^2", User);

  assert_parsed_expression_simplify_to("1/(‚àö(2)+‚àö(3))", "1/\u0012‚àö(3)+‚àö(2)\u0013", System);
  assert_parsed_expression_simplify_to("1/(‚àö(2)+‚àö(3))", "‚àö(3)-‚àö(2)", User);

  assert_parsed_expression_simplify_to("sign(abs(x))", "sign(abs(x))", System);
  assert_parsed_expression_simplify_to("sign(abs(x))", "1", User);

  assert_parsed_expression_simplify_to("atan(1/x)", "atan(1/x)", System);
  assert_parsed_expression_simplify_to("atan(1/x)", "\u0012œÄ√ósign(x)-2√óatan(x)\u0013/2", User);

  assert_parsed_expression_simplify_to("(1+x)/(1+x)", "(x+1)^0", System);
  assert_parsed_expression_simplify_to("(1+x)/(1+x)", "1", User);
}

QUIZ_CASE(poincare_simplification_mix) {
  // Root at denominator
  assert_parsed_expression_simplify_to("1/(‚àö(2)+‚àö(3))", "‚àö(3)-‚àö(2)");
  assert_parsed_expression_simplify_to("1/(5+‚àö(3))", "\u0012-‚àö(3)+5\u0013/22");
  assert_parsed_expression_simplify_to("1/(‚àö(2)+4)", "\u0012-‚àö(2)+4\u0013/14");
  assert_parsed_expression_simplify_to("1/(2‚àö(2)-4)", "\u0012-‚àö(2)-2\u0013/4");
  assert_parsed_expression_simplify_to("1/(-2‚àö(2)+4)", "\u0012‚àö(2)+2\u0013/4");
  assert_parsed_expression_simplify_to("45^2", "2025");
  assert_parsed_expression_simplify_to("1/(‚àö(2)ln(3))", "‚àö(2)/\u00122√óln(3)\u0013");
  assert_parsed_expression_simplify_to("‚àö(3/2)", "‚àö(6)/2");

  // Common operation mix
  assert_parsed_expression_simplify_to("(‚àö(2)√óœÄ + ‚àö(2)√ó‚ÑØ)/‚àö(2)", "‚ÑØ+œÄ");
  assert_parsed_expression_simplify_to("œÄ+(3‚àö(2)-2‚àö(3))/25", "\u001225√óœÄ-2√ó‚àö(3)+3√ó‚àö(2)\u0013/25");
  assert_parsed_expression_simplify_to("ln(2+3)", "ln(5)");
  assert_parsed_expression_simplify_to("3√óA√óB√óC+4√ócos(2)-2√óA√óB√óC+A√óB√óC+ln(3)+4√óA√óB-5√óA√óB√óC+cos(3)√óln(5)+cos(2)-45√ócos(2)", "cos(3)√óln(5)+ln(3)-40√ócos(2)+4√óA√óB-3√óA√óB√óC");
  assert_parsed_expression_simplify_to("2√óA+3√ócos(2)+3+4√óln(5)+5√óA+2√óln(5)+1+0", "6√óln(5)+3√ócos(2)+7√óA+4");
  assert_parsed_expression_simplify_to("2.3√óA+3√ócos(2)+3+4√óln(5)+5√óA+2√óln(5)+1.2+0.235", "\u00121200√óln(5)+600√ócos(2)+1460√óA+887\u0013/200");
  assert_parsed_expression_simplify_to("2√óA√óB√óC+2.3√óA√óB+3√óA^2+5.2√óA√óB√óC+4√óA^2", "\u001270√óA^2+23√óA√óB+72√óA√óB√óC\u0013/10");
  assert_parsed_expression_simplify_to("(A√óB)^2√óA+4√óA^3", "4√óA^3+A^3√óB^2");
  assert_parsed_expression_simplify_to("(A√ó3)^2√óA+4√óA^3", "13√óA^3");
  assert_parsed_expression_simplify_to("A^2^2√óA+4√óA^3", "A^5+4√óA^3");
  assert_parsed_expression_simplify_to("0.5+4√óA√óB-2.3+2√óA√óB-2√óB√óA^C-cos(4)+2√óA^C√óB+A√óB√óC√óD", "\u0012-5√ócos(4)+30√óA√óB+5√óA√óB√óC√óD-9\u0013/5");
  assert_parsed_expression_simplify_to("(1+‚àö(2))/5", "\u0012‚àö(2)+1\u0013/5");
  assert_parsed_expression_simplify_to("(2+‚àö(6))^2", "4√ó‚àö(6)+10");
  assert_parsed_expression_simplify_to("tan(3)ln(2)+œÄ", "tan(3)√óln(2)+œÄ");
  assert_parsed_expression_simplify_to("abs(dim(2))", "[[1,1]]");

  // Complex
  assert_parsed_expression_simplify_to("ùê¢", "ùê¢");
  assert_parsed_expression_simplify_to("‚àö(-33)", "‚àö(33)√óùê¢");
  assert_parsed_expression_simplify_to("ùê¢^(3/5)", "\u0012‚àö(2)√ó‚àö(-‚àö(5)+5)\u0013/4+\u0012‚àö(5)+1\u0013/4√óùê¢");
  assert_parsed_expression_simplify_to("ùê¢ùê¢ùê¢ùê¢", "1");
  assert_parsed_expression_simplify_to("‚àö(-ùê¢)", "‚àö(2)/2-‚àö(2)/2√óùê¢");
  assert_parsed_expression_simplify_to("A√ócos(9)ùê¢ùê¢ln(2)", "-A√ócos(9)√óln(2)");
  assert_parsed_expression_simplify_to("(‚àö(2)+‚àö(2)√óùê¢)/2(‚àö(2)+‚àö(2)√óùê¢)/2(‚àö(2)+‚àö(2)√óùê¢)/2", "‚àö(2)/32-‚àö(2)/32√óùê¢");
  assert_parsed_expression_simplify_to("root(5^((-ùê¢)3^9),ùê¢)", "1/‚ÑØ^atan(tan(19683√óln(5)))");
  assert_parsed_expression_simplify_to("ùê¢^ùê¢", "1/‚ÑØ^\u0012œÄ/2\u0013");
  assert_parsed_expression_simplify_to("ùê¢/(1+ùê¢√ó‚àö(x))", "ùê¢/\u0012‚àö(x)√óùê¢+1\u0013");
  assert_parsed_expression_simplify_to("x+ùê¢/(1+ùê¢√ó‚àö(x))", "\u0012x^\u00123/2\u0013√óùê¢+ùê¢+x\u0013/\u0012‚àö(x)√óùê¢+1\u0013");

  //assert_parsed_expression_simplify_to("log(cos(9)^ln(6), cos(9))", "ln(2)+ln(3)"); // TODO: for this to work, we must know the sign of cos(9)
  //assert_parsed_expression_simplify_to("log(cos(9)^ln(6), 9)", "ln(6)√ólog(cos(9), 9)"); // TODO: for this to work, we must know the sign of cos(9)
  assert_parsed_expression_simplify_to("(((‚àö(6)-‚àö(2))/4)/((‚àö(6)+‚àö(2))/4))+1", "-‚àö(3)+3");
  assert_parsed_expression_simplify_to("1/‚àö(ùê¢) √ó (‚àö(2)-ùê¢√ó‚àö(2))", "-2√óùê¢"); // TODO: get rid of complex at denominator?
}

QUIZ_CASE(poincare_hyperbolic_trigonometry) {
  // acosh(cosh)
  assert_parsed_expression_simplify_to("acosh(cosh(3))", "3");
  assert_parsed_expression_simplify_to("acosh(cosh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("acosh(cosh(-3))", "3");
  assert_parsed_expression_simplify_to("acosh(cosh(3))", "3", User, Radian, Real);
  assert_parsed_expression_simplify_to("acosh(cosh(0.5))", "1/2", User, Radian, Real);
  assert_parsed_expression_simplify_to("acosh(cosh(-3))", "3", User, Radian, Real);

  // cosh(acosh)
  assert_parsed_expression_simplify_to("cosh(acosh(3))", "3");
  assert_parsed_expression_simplify_to("cosh(acosh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("cosh(acosh(-3))", "-3");
  assert_parsed_expression_simplify_to("cosh(acosh(3))", "3", User, Radian, Real);
  assert_parsed_expression_simplify_to("cosh(acosh(0.5))", "cosh(acosh(1/2))", User, Radian, Real);
  assert_parsed_expression_simplify_to("cosh(acosh(-3))", "cosh(acosh(-3))", User, Radian, Real);

  // sinh(asinh)
  assert_parsed_expression_simplify_to("sinh(asinh(3))", "3");
  assert_parsed_expression_simplify_to("sinh(asinh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("sinh(asinh(-3))", "-3");
  assert_parsed_expression_simplify_to("sinh(asinh(3))", "3", User, Radian, Real);
  assert_parsed_expression_simplify_to("sinh(asinh(0.5))", "1/2", User, Radian, Real);
  assert_parsed_expression_simplify_to("sinh(asinh(-3))", "-3", User, Radian, Real);

  // asinh(sinh)
  assert_parsed_expression_simplify_to("asinh(sinh(3))", "3");
  assert_parsed_expression_simplify_to("asinh(sinh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("asinh(sinh(-3))", "-3");
  assert_parsed_expression_simplify_to("asinh(sinh(3))", "3", User, Radian, Real);
  assert_parsed_expression_simplify_to("asinh(sinh(0.5))", "1/2", User, Radian, Real);
  assert_parsed_expression_simplify_to("asinh(sinh(-3))", "-3", User, Radian, Real);

  // tanh(atanh)
  assert_parsed_expression_simplify_to("tanh(atanh(3))", "3");
  assert_parsed_expression_simplify_to("tanh(atanh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("tanh(atanh(-3))", "-3");
  assert_parsed_expression_simplify_to("tanh(atanh(3))", "tanh(atanh(3))", User, Radian, Real);
  assert_parsed_expression_simplify_to("tanh(atanh(0.5))", "1/2", User, Radian, Real);
  assert_parsed_expression_simplify_to("tanh(atanh(-3))", "-tanh(atanh(3))", User, Radian, Real);

  // atanh(tanh)
  assert_parsed_expression_simplify_to("atanh(tanh(3))", "3");
  assert_parsed_expression_simplify_to("atanh(tanh(0.5))", "1/2");
  assert_parsed_expression_simplify_to("atanh(tanh(-3))", "-3");
  assert_parsed_expression_simplify_to("atanh(tanh(3))", "3", User, Radian, Real);
  assert_parsed_expression_simplify_to("atanh(tanh(0.5))", "1/2", User, Radian, Real);
  assert_parsed_expression_simplify_to("atanh(tanh(-3))", "-3", User, Radian, Real);
}

QUIZ_CASE(poincare_probability) {
  assert_parsed_expression_simplify_to("invnorm(-1.3,2,3)", Undefined::Name());
  assert_parsed_expression_simplify_to("invnorm(0,2,3)", "-inf");
  assert_parsed_expression_simplify_to("invnorm(0.5,2,3)", "2");
  assert_parsed_expression_simplify_to("invnorm(1,2,3)", "inf");
  assert_parsed_expression_simplify_to("invnorm(1.3,2,3)", "undef");
  assert_parsed_expression_simplify_to("invnorm(3/4,2,random())", "invnorm(3/4,2,random())"); // random can be 0
  assert_parsed_expression_simplify_to("invnorm(0.5,2,0)", Undefined::Name());
  assert_parsed_expression_simplify_to("invnorm(0.5,2,-1)", Undefined::Name());
  assert_parsed_expression_simplify_to("normcdf(2,0,1)", "normcdf(2,0,1)");
  assert_parsed_expression_simplify_to("normcdf2(1,2,0,1)", "normcdf2(1,2,0,1)");
  assert_parsed_expression_simplify_to("normpdf(2,0,1)", "normpdf(2,0,1)");
}
