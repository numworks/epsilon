#include <poincare/init.h>
#include <poincare/exception_checkpoint.h>
#include <ion.h>
#include <cmath>
#include <assert.h>
#include "tree/helpers.h"
#include "helper.h"

using namespace Poincare;

void assert_tokenizes_as(const Token::Type * tokenTypes, const char * string) {
  char buffer[500];
  strlcpy(buffer, string, sizeof(buffer));
  translate_in_special_chars(buffer);
  Tokenizer tokenizer(buffer);
  while (true) {
    Token token = tokenizer.popToken();
    quiz_assert(token.type() == *tokenTypes);
    if (token.type() == Token::EndOfStream) {
      return;
    }
    tokenTypes++;
  }
}

void assert_tokenizes_as_number(const char * string) {
  const Token::Type types[] = {Token::Number, Token::EndOfStream};
  assert_tokenizes_as(types, string);
}

void assert_tokenizes_as_undefined_token(const char * string) {
  char buffer[500];
  strlcpy(buffer, string, sizeof(buffer));
  translate_in_special_chars(buffer);
  Tokenizer tokenizer(buffer);
  while (true) {
    Token token = tokenizer.popToken();
    if (token.type() == Token::Undefined) {
      return;
    }
    if (token.type() == Token::EndOfStream) {
      quiz_assert(false);
    }
  }
}

void assert_raises_parsing_error(const char * text) {
  char buffer[500];
  strlcpy(buffer, text, sizeof(buffer));
  translate_in_special_chars(buffer);
  Parser p(buffer);
  Expression result = p.parse();
  quiz_assert(p.getStatus() != Parser::Status::Success);
}

QUIZ_CASE(poincare_parser_tokenize_numbers) {
  assert_tokenizes_as_number("1");
  assert_tokenizes_as_number("12");
  assert_tokenizes_as_number("123");
  assert_tokenizes_as_number("1.3");
  assert_tokenizes_as_number(".3");
  assert_tokenizes_as_number("1.3E3");
  assert_tokenizes_as_number("12.34E56");
  assert_tokenizes_as_number(".3E-32");
  assert_tokenizes_as_number("12.");
  assert_tokenizes_as_number(".999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999");
  assert_tokenizes_as_number("0.");
  assert_tokenizes_as_number("1.E-4");
  assert_tokenizes_as_number("1.E9999");

  assert_tokenizes_as_undefined_token("1E");
  assert_tokenizes_as_undefined_token("1..");
  assert_tokenizes_as_undefined_token("..");
  assert_tokenizes_as_undefined_token("1.EE");
  assert_tokenizes_as_undefined_token("1.E");
  assert_tokenizes_as_undefined_token("1E--4");
  assert_tokenizes_as_undefined_token("1.EE4");
  assert_tokenizes_as_undefined_token("1E2E4");
}

QUIZ_CASE(poincare_parser_parse_numbers) {
  int initialPoolSize = pool_size();
  assert_parsed_expression_type("2+3", ExpressionNode::Type::Addition);
  assert_pool_size(initialPoolSize);

  // Parse digits
  assert_parsed_expression_is("0", Rational(0));
  assert_parsed_expression_is("0.1", Decimal(0.1));
  assert_parsed_expression_is("1.", Rational(1));
  assert_parsed_expression_is(".1", Decimal(0.1));
  assert_parsed_expression_is("0E2", Decimal(0.0));
  assert_parsed_expression_is("0.1E2", Decimal(10.0));
  assert_parsed_expression_is("1.E2", Decimal(100.0));
  assert_parsed_expression_is(".1E2", Decimal(10.0));
  assert_parsed_expression_is("0E-2", Decimal(0.0));
  assert_parsed_expression_is("0.1E-2", Decimal(0.001));
  assert_parsed_expression_is("1.E-2", Decimal(0.01));
  assert_parsed_expression_is(".1E-2", Decimal(0.001));
}

QUIZ_CASE(poincare_parser_memory_exhaustion) {
  int initialPoolSize = pool_size();
  int memoryFailureHasBeenHandled = false;
  {
    Poincare::ExceptionCheckpoint ecp;
    if (ExceptionRun(ecp)) {
      Addition a = Addition();
      while (true) {
        Expression e = Expression::Parse("1+2+3+4+5+6+7+8+9+10");
        a.addChildAtIndexInPlace(e, 0, a.numberOfChildren());
      }
    } else {
      Poincare::Tidy();
      memoryFailureHasBeenHandled = true;
    }
  }

  quiz_assert(memoryFailureHasBeenHandled);
  assert_pool_size(initialPoolSize);
  Expression e = Expression::Parse("1+1");
  /* Stupid check to make sure the global variable generated by Bison is not
   * ruining everything */
}

QUIZ_CASE(poincare_parser_parse) {
  assert_parsed_expression_is("1", Rational(1));
  assert_parsed_expression_is("(1)", Parenthesis(Rational(1)));
  assert_parsed_expression_is("((1))", Parenthesis((Expression)Parenthesis(Rational(1))));
  assert_parsed_expression_is("1+2", Addition(Rational(1),Rational(2)));
  assert_parsed_expression_is("(1)+2", Addition(Parenthesis(Rational(1)),Rational(2)));
  assert_parsed_expression_is("(1+2)", Parenthesis(Addition(Rational(1),Rational(2))));
  assert_parsed_expression_is("1+2+3", Addition(Addition(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("1+2+(3+4)", Addition(Addition(Rational(1),Rational(2)),Parenthesis(Addition(Rational(3),Rational(4)))));
  assert_parsed_expression_is("1*2", Multiplication(Rational(1),Rational(2)));
  assert_parsed_expression_is("1*2*3", Multiplication(Multiplication(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("1+2*3", Addition(Rational(1), Multiplication(Rational(2), Rational(3))));
  assert_parsed_expression_is("1/2", Division(Rational(1),Rational(2)));
  assert_parsed_expression_is("(1/2)", Parenthesis(Division(Rational(1),Rational(2))));
  assert_parsed_expression_is("1/2/3", Division(Division(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("1/2*3", Multiplication(Division(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("(1/2*3)", Parenthesis(Multiplication(Division(Rational(1),Rational(2)),Rational(3))));
  assert_parsed_expression_is("1*2/3", Multiplication(Rational(1),Division(Rational(2),Rational(3))));
  assert_parsed_expression_is("(1*2/3)", Parenthesis(Multiplication(Rational(1),Division(Rational(2),Rational(3)))));
  assert_parsed_expression_is("(1/2/3)", Parenthesis(Division(Division(Rational(1),Rational(2)),Rational(3))));
  assert_parsed_expression_is("1^2", Power(Rational(1),Rational(2)));
  assert_parsed_expression_is("1^2^3", Power(Rational(1),Power(Rational(2),Rational(3))));
  assert_parsed_expression_is("1=2", Equal(Rational(1),Rational(2)));
  assert_raises_parsing_error("=5");
  assert_raises_parsing_error("1=2=3");
  assert_parsed_expression_is("-1", Opposite(Rational(1)));
  assert_parsed_expression_is("(-1)", Parenthesis(Opposite(Rational(1))));
  assert_parsed_expression_is("1-2", Subtraction(Rational(1),Rational(2)));
  assert_parsed_expression_is("-1-2", Subtraction(Opposite(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1-2-3", Subtraction(Subtraction(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("(1-2)", Parenthesis(Subtraction(Rational(1),Rational(2))));
  assert_parsed_expression_is("1+-2", Addition(Rational(1),Opposite(Rational(2))));
  assert_parsed_expression_is("--1", Opposite((Expression)Opposite(Rational(1))));
  assert_parsed_expression_is("(1+2)-3", Subtraction(Parenthesis(Addition(Rational(1),Rational(2))),Rational(3)));
  assert_parsed_expression_is("(2*-3)", Parenthesis(Multiplication(Rational(2),Opposite(Rational(3)))));
  assert_parsed_expression_is("1^(2)-3", Subtraction(Power(Rational(1),Parenthesis(Rational(2))),Rational(3)));
  assert_parsed_expression_is("1^2-3", Subtraction(Power(Rational(1),Rational(2)),Rational(3)));
  assert_parsed_expression_is("2^-3", Power(Rational(2),Opposite(Rational(3))));
  assert_parsed_expression_is("2--2+-1", Addition(Subtraction(Rational(2),Opposite(Rational(2))),Opposite(Rational(1))));
  assert_parsed_expression_is("2--2*-1", Subtraction(Rational(2),Opposite(Multiplication(Rational(2),Opposite(Rational(1))))));
  assert_parsed_expression_is("-1^2", Opposite(Power(Rational(1),Rational(2))));
  assert_parsed_expression_is("2/-3/-4", Division(Division(Rational(2),Opposite(Rational(3))),Opposite(Rational(4))));
  assert_parsed_expression_is("1*2-3*4", Subtraction(Multiplication(Rational(1),Rational(2)),Multiplication(Rational(3),Rational(4))));
  assert_parsed_expression_is("-1*2", Opposite(Multiplication(Rational(1), Rational(2))));
  assert_parsed_expression_is("1!", Factorial(Rational(1)));
  assert_parsed_expression_is("1+2!", Addition(Rational(1),Factorial(Rational(2))));
  assert_parsed_expression_is("1!+2", Addition(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1!+2!", Addition(Factorial(Rational(1)),Factorial(Rational(2))));
  assert_parsed_expression_is("1*2!", Multiplication(Rational(1),Factorial(Rational(2))));
  assert_parsed_expression_is("1!*2", Multiplication(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1!*2!", Multiplication(Factorial(Rational(1)),Factorial(Rational(2))));
  assert_parsed_expression_is("1-2!", Subtraction(Rational(1),Factorial(Rational(2))));
  assert_parsed_expression_is("1!-2", Subtraction(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1!-2!", Subtraction(Factorial(Rational(1)),Factorial(Rational(2))));
  assert_parsed_expression_is("1/2!", Division(Rational(1),Factorial(Rational(2))));
  assert_parsed_expression_is("1!/2", Division(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1!/2!", Division(Factorial(Rational(1)),Factorial(Rational(2))));
  assert_parsed_expression_is("1^2!", Power(Rational(1),Factorial(Rational(2))));
  assert_parsed_expression_is("1!^2", Power(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1!^2!", Power(Factorial(Rational(1)),Factorial(Rational(2))));
  assert_parsed_expression_is("(1)!", Factorial(Parenthesis(Rational(1))));
  assert_raises_parsing_error("1+");
  assert_raises_parsing_error(")");
  assert_raises_parsing_error(")(");
  assert_raises_parsing_error("()");
  assert_raises_parsing_error("(1");
  assert_raises_parsing_error("1)");
  assert_raises_parsing_error("1++2");
  assert_raises_parsing_error("1//2");
  assert_raises_parsing_error("*1");
  assert_raises_parsing_error("1^^2");
  assert_raises_parsing_error("^1");
  assert_raises_parsing_error("t0000000");
  assert_raises_parsing_error("[[t0000000[");
  assert_raises_parsing_error("0>x=0");
  assert_raises_parsing_error("0=0>x");
  assert_raises_parsing_error("1E2E3");
}

Matrix BuildMatrix(int rows, int columns, Expression entries[]) {
  Matrix m;
  int position = 0;
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < columns; j++) {
      m.addChildAtIndexInPlace(entries[position], position, position);
      position++;
    }
  }
  m.setDimensions(rows, columns);
  return m;
}

QUIZ_CASE(poincare_parser_matrices) {
  Expression m1[] = {Rational(1)};
  assert_parsed_expression_is("[[1]]", BuildMatrix(1,1,m1));
  Expression m2[] = {Rational(1),Rational(2),Rational(3)};
  assert_parsed_expression_is("[[1,2,3]]", BuildMatrix(1,3,m2));
  Expression m3[] = {Rational(1),Rational(2),Rational(3),Rational(4),Rational(5),Rational(6)};
  assert_parsed_expression_is("[[1,2,3][4,5,6]]", BuildMatrix(2,3,m3));
  Expression m4[] = {Rational(1), BuildMatrix(1,1,m1)};
  assert_parsed_expression_is("[[1,[[1]]]]", BuildMatrix(1,2,m4));
  assert_raises_parsing_error("[");
  assert_raises_parsing_error("]");
  assert_raises_parsing_error("[[");
  assert_raises_parsing_error("][");
  assert_raises_parsing_error("[]");
  assert_raises_parsing_error("[1]");
  assert_raises_parsing_error("[[1,2],[3]]");
  assert_raises_parsing_error("[[]");
  assert_raises_parsing_error("[[1]");
  assert_raises_parsing_error("[1]]");
  assert_raises_parsing_error("[[,]]");
  assert_raises_parsing_error("[[1,]]");
  assert_raises_parsing_error(",");
  assert_raises_parsing_error("[,]");
}

QUIZ_CASE(poincare_parser_symbols_and_functions) {
  // User-defined symbols
  assert_parsed_expression_is("a", Symbol("a", 1));
  assert_parsed_expression_is("x", Symbol("x", 1));
  assert_parsed_expression_is("toot", Symbol("toot", 4));
  assert_parsed_expression_is("toto_", Symbol("toto_", 5));
  assert_parsed_expression_is("t_toto", Symbol("t_toto", 6));
  assert_parsed_expression_is("tot12", Symbol("tot12", 5));
  assert_parsed_expression_is("TOto", Symbol("TOto", 4));
  assert_parsed_expression_is("TO12_Or", Symbol("TO12_Or", 7));
  assert_raises_parsing_error("_a");
  assert_raises_parsing_error("abcdefgh");

  // User-defined functions
  assert_parsed_expression_is("f(x)", Function("f", 1, Symbol("x",1)));
  assert_parsed_expression_is("f(1)", Function("f", 1, Rational(1)));
  assert_parsed_expression_is("ab12AB_(x)", Function("ab12AB_", 7, Symbol("x",1)));
  assert_parsed_expression_is("ab12AB_(1)", Function("ab12AB_", 7, Rational(1)));
  assert_parsed_expression_is("f(g(x))", Function("f", 1, Function("g", 1, Symbol("x",1))));
  assert_parsed_expression_is("f(g(1))", Function("f", 1, Function("g", 1, Rational(1))));
  assert_parsed_expression_is("f((1))", Function("f", 1, Parenthesis(Rational(1))));
  assert_raises_parsing_error("f(1,2)");
  assert_raises_parsing_error("f(f)");
  assert_raises_parsing_error("abcdefgh(1)");

  // Reserved symbols
  assert_parsed_expression_is("ans", Symbol("ans", 3));
  assert_parsed_expression_is("I", Constant(Ion::Charset::IComplex));
  assert_parsed_expression_is("P", Constant(Ion::Charset::SmallPi));
  assert_parsed_expression_is("X", Constant(Ion::Charset::Exponential));
  assert_parsed_expression_is(Infinity::Name(), Infinity(false));
  assert_parsed_expression_is(Undefined::Name(), Undefined());

  assert_raises_parsing_error("u");
  assert_raises_parsing_error("v");

  // Reserved functions
  assert_parsed_expression_is("acos(1)", ArcCosine::Builder(Rational(1)));
  assert_parsed_expression_is("acosh(1)", HyperbolicArcCosine::Builder(Rational(1)));
  assert_parsed_expression_is("abs(1)", AbsoluteValue::Builder(Rational(1)));
  assert_parsed_expression_is("arg(1)", ComplexArgument::Builder(Rational(1)));
  assert_parsed_expression_is("asin(1)", ArcSine::Builder(Rational(1)));
  assert_parsed_expression_is("asinh(1)", HyperbolicArcSine::Builder(Rational(1)));
  assert_parsed_expression_is("atan(1)", ArcTangent::Builder(Rational(1)));
  assert_parsed_expression_is("atanh(1)", HyperbolicArcTangent::Builder(Rational(1)));
  assert_parsed_expression_is("binomial(2,1)", BinomialCoefficient::Builder(Rational(2),Rational(1)));
  assert_parsed_expression_is("ceil(1)", Ceiling::Builder(Rational(1)));
  assert_parsed_expression_is("confidence(1,2)", ConfidenceInterval::Builder(Rational(1),Rational(2)));
  assert_raises_parsing_error("diff(1,2,3)");
  assert_parsed_expression_is("diff(1,x,3)", Derivative::Builder(Rational(1),Symbol("x",1),Rational(3)));
  assert_parsed_expression_is("dim(1)", MatrixDimension::Builder(Rational(1)));
  assert_parsed_expression_is("conj(1)", Conjugate::Builder(Rational(1)));
  assert_parsed_expression_is("det(1)", Determinant::Builder(Rational(1)));
  assert_parsed_expression_is("cos(1)", Cosine::Builder(Rational(1)));
  assert_parsed_expression_is("cosh(1)", HyperbolicCosine::Builder(Rational(1)));
  assert_parsed_expression_is("factor(1)", Factor::Builder(Rational(1)));
  assert_parsed_expression_is("floor(1)", Floor::Builder(Rational(1)));
  assert_parsed_expression_is("frac(1)", FracPart::Builder(Rational(1)));
  assert_parsed_expression_is("gcd(1,2)", GreatCommonDivisor::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("im(1)", ImaginaryPart::Builder(Rational(1)));
  assert_parsed_expression_is("int(1,x,2,3)", Integral::Builder(Rational(1),Symbol("x",1),Rational(2),Rational(3)));
  assert_raises_parsing_error("int(1,2,3,4)");
  assert_parsed_expression_is("inverse(1)", MatrixInverse::Builder(Rational(1)));
  assert_parsed_expression_is("lcm(1,2)", LeastCommonMultiple::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("ln(1)", NaperianLogarithm::Builder(Rational(1)));
  assert_parsed_expression_is("log(1)", CommonLogarithm::Builder(Rational(1)));
  assert_parsed_expression_is("log(1,2)", Logarithm::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("log_{2}(1)", Logarithm::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("permute(2,1)", PermuteCoefficient::Builder(Rational(2),Rational(1)));
  assert_parsed_expression_is("prediction95(1,2)", PredictionInterval::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("prediction(1,2)", SimplePredictionInterval::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("product(1,n,2,3)", Product::Builder(Rational(1),Symbol("n",1),Rational(2),Rational(3)));
  assert_raises_parsing_error("product(1,2,3,4)");
  assert_parsed_expression_is("quo(1,2)", DivisionQuotient::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("random()", Random::Builder());
  assert_parsed_expression_is("randint(1,2)", Randint::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("re(1)", RealPart::Builder(Rational(1)));
  assert_parsed_expression_is("rem(1,2)", DivisionRemainder::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("root(1,2)", NthRoot::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("round(1,2)", Round::Builder(Rational(1),Rational(2)));
  assert_parsed_expression_is("sin(1)", Sine::Builder(Rational(1)));
  assert_parsed_expression_is("sinh(1)", HyperbolicSine::Builder(Rational(1)));
  assert_parsed_expression_is("sum(1,n,2,3)", Sum::Builder(Rational(1),Symbol("n",1),Rational(2),Rational(3)));
  assert_raises_parsing_error("sum(1,2,3,4)");
  assert_parsed_expression_is("tan(1)", Tangent::Builder(Rational(1)));
  assert_parsed_expression_is("tanh(1)", HyperbolicTangent::Builder(Rational(1)));
  assert_parsed_expression_is("trace(1)", MatrixTrace::Builder(Rational(1)));
  assert_parsed_expression_is("transpose(1)", MatrixTranspose::Builder(Rational(1)));
  assert_parsed_expression_is("\x91(1)", SquareRoot::Builder(Rational(1)));
  assert_raises_parsing_error("cos(1,2)");
  assert_raises_parsing_error("log(1,2,3)");
}

QUIZ_CASE(poincare_parser_parse_store) {
  assert_parsed_expression_is("1>a", Store(Rational(1),Symbol("a",1)));
  assert_parsed_expression_is("1>e", Store(Rational(1),Symbol("e",1)));
  assert_parsed_expression_is("1>f(x)", Store(Rational(1),Function("f",1,Symbol("x",1))));
  assert_parsed_expression_is("x>f(x)", Store(Symbol("x",1),Function("f",1,Symbol("x",1))));
  assert_parsed_expression_is("n>f(x)", Store(Symbol("n",1),Function("f",1,Symbol("x",1))));
  assert_parsed_expression_is("[[x]]>f(x)", Store(Matrix(Symbol('x')), Function("f", 1, Symbol('x'))));
  assert_raises_parsing_error("a>b>c");
  assert_raises_parsing_error("1>2");
  assert_raises_parsing_error("1>");
  assert_raises_parsing_error(">2");
  assert_raises_parsing_error("(1>a)");
  assert_raises_parsing_error("1>u(n)");
  assert_raises_parsing_error("1>u(n+1)");
  assert_raises_parsing_error("1>v(n)");
  assert_raises_parsing_error("1>v(n+1)");
  assert_raises_parsing_error("1>u_{n}");
  assert_raises_parsing_error("1>u_{n+1}");
  assert_raises_parsing_error("1>v_{n}");
  assert_raises_parsing_error("1>v_{n+1}");
  assert_raises_parsing_error("1>inf");
  assert_raises_parsing_error("1>undef");
  assert_raises_parsing_error("1>P");
  assert_raises_parsing_error("1>I");
  assert_raises_parsing_error("1>X");
  assert_raises_parsing_error("1>\1"); // UnknownX
  assert_raises_parsing_error("1>acos");
  assert_raises_parsing_error("1>f(2)");
  assert_raises_parsing_error("1>f(f)");
  assert_raises_parsing_error("1>ans");
  assert_raises_parsing_error("ans>ans");
}

QUIZ_CASE(poincare_parser_implicit_multiplication) {
  assert_raises_parsing_error(".1.2");
  assert_raises_parsing_error("1 2");
  assert_parsed_expression_is("1x", Multiplication(Rational(1),Symbol("x", 1)));
  assert_parsed_expression_is("1ans", Multiplication(Rational(1),Symbol("ans", 3)));
  assert_parsed_expression_is("x1", Symbol("x1", 2));
  assert_parsed_expression_is("1x+2", Addition(Multiplication(Rational(1),Symbol("x", 1)),Rational(2)));
  assert_parsed_expression_is("1P", Multiplication(Rational(1),Constant(Ion::Charset::SmallPi)));
  assert_parsed_expression_is("1x-2", Subtraction(Multiplication(Rational(1),Symbol("x", 1)),Rational(2)));
  assert_parsed_expression_is("-1x", Opposite(Multiplication(Rational(1),Symbol("x", 1))));
  assert_parsed_expression_is("2*1x", Multiplication(Rational(2),Multiplication(Rational(1),Symbol("x", 1))));
  assert_parsed_expression_is("2^1x", Multiplication(Power(Rational(2),Rational(1)),Symbol("x", 1)));
  assert_parsed_expression_is("1x^2", Multiplication(Rational(1),Power(Symbol("x", 1),Rational(2))));
  assert_parsed_expression_is("2/1x", Division(Rational(2),Multiplication(Rational(1),Symbol("x", 1))));
  assert_parsed_expression_is("1x/2", Division(Multiplication(Rational(1),Symbol("x", 1)),Rational(2)));
  assert_parsed_expression_is("(1)2", Multiplication(Parenthesis(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1(2)", Multiplication(Rational(1),Parenthesis(Rational(2))));
  assert_parsed_expression_is("sin(1)2", Multiplication(Sine::Builder(Rational(1)),Rational(2)));
  assert_parsed_expression_is("1cos(2)", Multiplication(Rational(1),Cosine::Builder(Rational(2))));
  assert_parsed_expression_is("1!2", Multiplication(Factorial(Rational(1)),Rational(2)));
  assert_parsed_expression_is("2X^(3)", Multiplication(Rational(2),Power(Constant(Ion::Charset::Exponential),Parenthesis(Rational(3)))));
  Expression m1[] = {Rational(1)}; Matrix M1 = BuildMatrix(1,1,m1);
  Expression m2[] = {Rational(2)}; Matrix M2 = BuildMatrix(1,1,m2);
  assert_parsed_expression_is("[[1]][[2]]", Multiplication(M1,M2));
}

QUIZ_CASE(poincare_parser_expression_evaluation) {
  assert_parsed_expression_evaluates_to<float>("-0", "0");
  assert_parsed_expression_evaluates_to<float>("-0.1", "-0.1");
  assert_parsed_expression_evaluates_to<float>("-1.", "-1");
  assert_parsed_expression_evaluates_to<float>("-.1", "-0.1");
  assert_parsed_expression_evaluates_to<float>("-0E2", "0");
  assert_parsed_expression_evaluates_to<float>("-0.1E2", "-10");
  assert_parsed_expression_evaluates_to<float>("-1.E2", "-100");
  assert_parsed_expression_evaluates_to<float>("-.1E2", "-10");
  assert_parsed_expression_evaluates_to<float>("-0E-2", "0");
  assert_parsed_expression_evaluates_to<float>("-0.1E-2", "-0.001");
  assert_parsed_expression_evaluates_to<float>("-1.E-2", "-0.01");
  assert_parsed_expression_evaluates_to<float>("-.1E-2", "-0.001");

  assert_parsed_expression_evaluates_to<float>("-2-3", "-5");
  assert_parsed_expression_evaluates_to<float>("1.2*X^(1)", "3.261938");
  assert_parsed_expression_evaluates_to<float>("2X^(3)", "40.1711", System, Radian, Cartesian, 6); // WARNING: the 7th significant digit is wrong on blackbos simulator
  assert_parsed_expression_evaluates_to<float>("X^2*X^(1)", "20.0855", System, Radian, Cartesian, 6); // WARNING: the 7th significant digit is wrong on simulator
  assert_parsed_expression_evaluates_to<double>("X^2*X^(1)", "20.085536923188");
  assert_parsed_expression_evaluates_to<double>("2*3^4+2", "164");
  assert_parsed_expression_evaluates_to<float>("-2*3^4+2", "-160");
  assert_parsed_expression_evaluates_to<double>("-sin(3)*2-3", "-3.2822400161197", System, Radian);
  assert_parsed_expression_evaluates_to<float>("-.003", "-0.003");
  assert_parsed_expression_evaluates_to<double>(".02E2", "2");
  assert_parsed_expression_evaluates_to<float>("5-2/3", "4.333333");
  assert_parsed_expression_evaluates_to<double>("2/3-5", "-4.3333333333333");
  assert_parsed_expression_evaluates_to<float>("-2/3-5", "-5.666667");
  assert_parsed_expression_evaluates_to<double>("sin(3)2(4+2)", "1.6934400967184", System, Radian);
  assert_parsed_expression_evaluates_to<float>("4/2*(2+3)", "10");
  assert_parsed_expression_evaluates_to<double>("4/2*(2+3)", "10");
}
