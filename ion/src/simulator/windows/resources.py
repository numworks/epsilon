# This script generates a .h file representing available resources to access
# them from C code

import sys
import re
import argparse
import io

parser = argparse.ArgumentParser(description="Process some jpg files.")
parser.add_argument('--resource', help='the resources.rc file')
parser.add_argument('--header', help='the .h file to generate')
args = parser.parse_args()

def process_line(f, line):
    rc_re = re.compile('^(\d{1,4}) RCDATA "\.\./assets/(.*)"')
    rc_match = rc_re.match(line)
    if rc_match:
        f.write('{"' + rc_match.groups()[1] + '", ' + rc_match.groups()[0]  + '},\n')
        return True
    return False

def process_resource(resource, path):
    rc = open(resource, "r")
    f = open(path, "w")

    f.write("#ifndef ION_SIMULATOR_WINDOWS_RESOURCES_H\n")
    f.write("#define ION_SIMULATOR_WINDOWS_RESOURCES_H\n\n")
    f.write("// This file is auto-generated by resources.py\n\n")
    f.write("constexpr struct {const char * identifier; int id; } resourcesIdentifiers[] = {\n")

    while (process_line(f, rc.readline())):
        pass

    f.write("};\n\n")
    f.write("#endif\n")
    rc.close()
    f.close()

process_resource(args.resource, args.header)


