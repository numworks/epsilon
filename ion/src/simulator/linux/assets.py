# This script generates:
# - .s file representing assets in order to access them from C code
# - .h representing the mapping between symbols and assets

import sys
import re
import argparse
import io
import os

parser = argparse.ArgumentParser(description="Process some asset files.")
parser.add_argument('--files', nargs='+', help='a list of file names')
parser.add_argument('--implementation', help='the .s file to generate')
parser.add_argument('--header', help='the .h file to generate')
args = parser.parse_args()

def print_asset(f, asset):
    asset_basename = os.path.splitext(asset)[0]
    f.write(".global _ion_simulator_" + asset_basename + "_start\n")
    f.write(".global _ion_simulator_" + asset_basename + "_end\n")
    f.write("_ion_simulator_" + asset_basename + "_start:\n")
    f.write("    .incbin \"ion/src/simulator/assets/" + asset + "\"\n")
    f.write("_ion_simulator_" + asset_basename + "_end:\n\n")

def print_assembly(files, path):
    f = open(path, "w")
    for asset in files:
        print_asset(f, asset)
        identifier += 1
    f.close()

def print_declaration(f, asset):
    asset_basename = os.path.splitext(asset)[0]
    f.write("extern unsigned char _ion_simulator_" + asset_basename + "_start;\n")
    f.write("extern unsigned char _ion_simulator_" + asset_basename + "_end;\n")

def print_mapping(f, asset):
    f.write('"' + asset + '", &_ion_simulator_' + asset_basename +'_start, &_ion_simulator_' + asset_basename '_end},\n')

def print_header(files, path):
    f = open(path, "w")
    f.write("#ifndef ION_SIMULATOR_LINUX_IMAGES_H\n")
    f.write("#define ION_SIMULATOR_LINUX_IMAGES_H\n\n")
    f.write("// This file is auto-generated by assets.py\n\n")

    for asset in files:
        print_declaration(f, asset)

    f.write("\nstatic struct { const char * identifier; unsigned char * start; unsigned char * end; } resources_addresses[] = {\n")
    for asset in files:
        print_mapping(f, asset)

    f.write("};\n\n")
    f.write("#endif\n")
    f.close()

if (args.implementation):
    print_assembly(args.files, args.implementation)
if (args.header):
    print_header(args.files, args.implementation)
