name: Metrics
on: [pull_request_target]
env:
  MAKEFLAGS: ${{ (github.repository == 'numworks/epsilon-internal') && '-j32' || '-j2' }} EMBED_EXTRA_DATA=1

jobs:
  binary-size:
    runs-on: ${{ (github.repository == 'numworks/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
    steps:
      - name: Install ARM toolchain
        uses: numworks/setup-arm-toolchain@latest
      - name: Fetch target branch and PR branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Find most recent ancestor of PR and target branch
        id: common_ancestor
        run: echo "commit_sha=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})" >> $GITHUB_OUTPUT
      - name: Checkout to most recent ancestor
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          submodules: ${{ secrets.PAT != null }}
          ref:  ${{ steps.common_ancestor.outputs.commit_sha }}
          path: base
      - name: Install dependencies
        run: cd base && build/setup.sh
      - name: Check for epsilon-core
        id: epsilon-core
        run: "[[ -e ion/src/device/epsilon-core/.gitignore ]]"
        continue-on-error: true
      - name: Build common ancestor bootloader and kernel for N0110
        # build the largest target
        if: ${{ steps.epsilon-core.outcome == 'success' }}
        run: cd base && make bootloader.elf && make kernel.onboarding.beta.allow3rdparty.A.elf
      - name: Build common ancestor userland for N0110
        # build the largest target
        run: cd base && make userland.onboarding.beta.allow3rdparty.A.elf
      - name: Find head of PR
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
          submodules: ${{ secrets.PAT != null }}
          ref: ${{ github.event.pull_request.head.sha }}
          path: head
      - name: Install dependencies
        run: cd head && build/setup.sh
      - name: Build head bootloader and kernel for N0110
        # build the largest target
        if: ${{ steps.epsilon-core.outcome == 'success' }}
        run: cd head && make bootloader.elf && make kernel.onboarding.beta.allow3rdparty.A.elf
      - name: Build head userland for N0110
        # build the largest target
        run: cd head && make userland.onboarding.beta.allow3rdparty.A.elf
      # tables with bootloader and kernel
      - name: Binary size summary
        id: binary_size_summary
        if: ${{ steps.epsilon-core.outcome == 'success' }}
        run: echo "table=$(head/.venv/bin/python3 head/build/metrics/binary_size.py @Base base/output/release/device/n0110/kernel/kernel.onboarding.beta.allow3rdparty.A.elf base/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf @Head head/output/release/device/n0110/kernel/kernel.onboarding.beta.allow3rdparty.A.elf head/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf --sections @Flash .text .rodata .data @RAM .bss .data --summarize)" >> $GITHUB_OUTPUT
      - name: Binary size N0110
        id: binary_size_n0110
        if: ${{ steps.epsilon-core.outcome == 'success' }}
        run: echo "table=$(head/.venv/bin/python3 head/build/metrics/binary_size.py @Base base/output/release/device/n0110/bootloader/bootloader.elf base/output/release/device/n0110/kernel/kernel.onboarding.beta.allow3rdparty.A.elf base/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf @Head head/output/release/device/n0110/bootloader/bootloader.elf head/output/release/device/n0110/kernel/kernel.onboarding.beta.allow3rdparty.A.elf head/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf --sections .text .rodata .bss .data)" >> $GITHUB_OUTPUT
      # tables with userland only
      - name: Binary size summary (userland only)
        id: userland_binary_size_summary
        if: ${{ steps.epsilon-core.outcome != 'success' }}
        run: echo "table=$(head/.venv/bin/python3 head/build/metrics/binary_size.py @Base base/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf @Head head/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf --sections @Flash .text .rodata .data @RAM .bss .data --summarize)" >> $GITHUB_OUTPUT
      - name: Binary size N0110 (userland only)
        id: userland_binary_size_n0110
        if: ${{ steps.epsilon-core.outcome != 'success' }}
        run: echo "table=$(head/.venv/bin/python3 head/build/metrics/binary_size.py @Base base/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf @Head head/output/release/device/n0110/userland/userland.onboarding.beta.allow3rdparty.A.elf --sections .text .rodata .bss .data)" >> $GITHUB_OUTPUT
      # final comment
      - name: Add comment
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `# Binary size analysis\n\n${{ (steps.epsilon-core.outcome == 'success') && steps.binary_size_summary.outputs.table || steps.userland_binary_size_summary.outputs.table }}\n<details>\n<summary>Full details</summary>\n\n## N0110\n\n${{ (steps.epsilon-core.outcome == 'success') && steps.binary_size_n0110.outputs.table || steps.userland_binary_size_n0110.outputs.table }}</details>`,
            });
